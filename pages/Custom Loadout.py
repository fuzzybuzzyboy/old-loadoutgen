import streamlit as st, os; from random import choice, sample, randint # type: ignore
st.set_page_config(page_title='Custom Loadout', page_icon="🤑", layout="wide", initial_sidebar_state="expanded", menu_items={'Get help': 'https://github.com/fuzzybuzzyboy/py', 'Report a bug': "https://github.com/fuzzybuzzyboy/py", 'About': "Random items generator for fortnite (no this doesn't inject into your game and do something blah blah blah)"})
if not os.path.exists(os.path.join('configs', 'AutoConfig_Custom.txt')): st.toast(':red[AutoConfig]\n\nCreated file: :orange[Configs\\AutoConfig_Custom.txt]\n\nReason: File missing.')

items = {'Shotgun': ['Hammer Pump Shotgun', 'Combat Shotgun', 'Frenzy Auto Shotgun', 'Gatekeeper Shotgun'], 'SMG': ['Thunder Burst SMG', 'Harbinger SMG'], 'Pistol': ['Ranger Pistol', 'Hand Cannon'], 'Assault-Rifle': ['The Machinist\'s Combat Assault Rifle', 'Warforged Assault Rifle', 'Tactical Assault Rifle', 'Enforcer AR'], 'Explosives': ['Boom Bolt'], 'DMR': ['Huntress DMR'], 'Other': ['Nitro Fists', 'Shockwave Grenade', 'Boogie Bomb'], 'Health': ['Nitro Splash', 'Nuka-Cola', 'Shield Potion', 'Small Shield Potion', 'Flowberry Fizz', 'Medkit']}
item_raritys = {'Hammer Pump Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Combat Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Frenzy Auto Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Gatekeeper Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Thunder Burst SMG': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Harbinger SMG': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Ranger Pistol': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Hand Cannon': ['Rare', 'Epic', 'Legendary', 'Mythic'], 'The Machinist\'s Combat Assault Rifle': ['Mythic'], 'Warforged Assault Rifle': ['Common', 'Uncommon', 'Rare', 'Epic'], 'Tactical Assault Rifle': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Enforcer AR': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Boom Bolt': ['Rare', 'Epic', 'Legendary', 'Mythic'], 'Huntress DMR': ['Uncommon', 'Rare', 'Epic', 'Legendary'], 'Nitro Fists': ['Epic', 'Mythic'], 'Shockwave Grenade': ['Epic',], 'Boogie Bomb': ['Rare'], 'Nitro Splash': ['Rare'], 'Nuka-Cola': ['Epic'], 'Shield Potion': ['Rare',], 'Flowberry Fizz': ['Rare',], 'Small Shield Potion': ['Uncommon',], 'Medkit': ['Uncommon',],}
weapon_attachments = {'Hammer Pump Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Combat Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']],'Megalo Don\'s Combat Shotgun': [['Holo-13 Optic'], ['Speed Mag'], ['Laser'], ['Muzzle Brake']],'Frenzy Auto Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Oscar\'s Frenzy Auto Shotgun': [['Red Eye Sight'], ['Drum Mag'], ['Vertical Foregrip'], ['Muzzle Brake']],'Gatekeeper Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake']], 'Cerberus\' Gatekeeper Shotgun': [['None', ], ['Speed Mag', ], ['Speed Foregrip', ], ['Muzzle Brake', ]], 'Thunder Burst SMG': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Harbinger SMG': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Ranger Pistol': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']], 'Hand Cannon': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'Thermal Scope', 'Sniper Scope'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']], 'Conducter Hand Cannon': [['Holo-13 Optic'], ['Speed Mag'], ['Laser'], ['Muzzle Brake']], 'The Machinist\'s Combat Assault Rifle': [['Red Eye Sight'], ['Drum Mag'], ['Verical Foregrip'], ['Suppressor']], 'Warforged Assault Rifle': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Enforcer AR': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Tactical Assault Rifle': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Huntress DMR': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Boom Bolt': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'Thermal Scope', 'Sniper Scope'], ['None', 'Drum Mag', 'Speed Mag'], ['Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None']], 'Ringmaster\'s Boom Bolt': [['Holo-13 Optic'], ['Drum Mag'], ['Speed Foregrip'], ['None']], 'Megalo Don\'s Nitro Fists': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nitro Fists': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Shockwave Grenade': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Boogie Bomb': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nitro Splash': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nuka-Cola': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Shield Potion': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Flowberry Fizz': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Small Shield Potion': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Medkit': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]]}
Medallions=('The Machinist\'s Medallion', 'Ringmaster Scarr\'s Medallion', 'Megalo Don\'s Medallion')
items_images={'Hammer Pump Shotgun': os.path.join('item_images', 'Shotgun', 'HammerPumpShotgun.webp'), 'Frenzy Auto Shotgun': os.path.join('item_images', 'Shotgun', 'FrenzyAutoShotgun.webp'), 'Oscar\'s Frenzy Auto Shotgun': os.path.join('item_images', 'Shotgun', 'FrenzyAutoShotgun.webp'), 'Combat Shotgun': os.path.join('item_images', 'Shotgun', 'CombatShotgun.webp'), 'Megalo Don\'s Combat Shotgun': os.path.join('item_images', 'Shotgun', 'CombatShotgun.webp'), 'Gatekeeper Shotgun': os.path.join('item_images', 'Shotgun', 'GatekeeperShotgun.webp'), 'Cerberus\' Gatekeeper Shotgun': os.path.join('item_images', 'Shotgun', 'GatekeeperShotgun.webp'),'Thunder Burst SMG': os.path.join('item_images', 'SMG', 'ThunderBurstSMG.webp'), 'Harbinger SMG': os.path.join('item_images', 'SMG', 'HarbingerSMG.webp'),'Ranger Pistol': os.path.join('item_images', 'Pistol', 'RangerPistol.webp'), 'Hand Cannon': os.path.join('item_images', 'Pistol', 'HandCannon.webp'), 'Conducter Hand Cannon': os.path.join('item_images', 'Pistol', 'Hand Cannon'), 'The Machinist\'s Combat Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'CombatAR.webp'), 'Warforged Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'WarforgedAssaultRifle.webp'), 'Tactical Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'TacticalAssaultRifle.webp'), 'Enforcer AR': os.path.join('item_images', 'Assault-Rifle', 'EnforcerAR.webp'),'Huntress DMR': os.path.join('item_images', 'DMR', 'HuntressDMR.webp'), 'Boom Bolt': os.path.join('item_images', 'Explosives', 'BoomBolt.webp'), 'Ringmaster\'s Boom Bolt': os.path.join('item_images', 'Explosives', 'BoomBolt.webp'),'Nitro Fists': os.path.join('item_images', 'Other', 'NitroFists.webp'), 'Megalo Don\'s Nitro Fists': os.path.join('item_images', 'Other', 'NitroFists.webp'), 'Shockwave Grenade': os.path.join('item_images', 'Other', 'ShockwaveGrenade.webp'), 'Boogie Bomb': os.path.join('item_images', 'Other', 'BoogieBomb.webp'), 'Nitro Splash': os.path.join('item_images', 'Health', 'NitroSplash.webp'), 'Nuka Cola': os.path.join('item_images', 'Health', 'NukaCola.webp'), 'FlowBerry Fizz': os.path.join('item_images', 'Health', 'FlowBerryFizz.webp'), 'Shield Potion': os.path.join('item_images', 'Health', 'ShieldPotion.webp'), 'Small Shield Potion': os.path.join('item_images', 'Health', 'SmallShieldPotion.webp'), 'Medkit': os.path.join('item_images', 'Health', 'Medkit.webp')}
mythic_weapons = {'Combat Shotgun': 'Megalo Don\'s Combat Shotgun', 'Frenzy Auto Shotgun': 'Oscar\'s Frenzy Auto Shotgun', 'Gatekeeper Shotgun': 'Cerberus\' Gatekeeper Shotgun', 'Hand Cannon': 'Conducter Hand Cannon', 'Boom Bolt': 'Ringmaster\'s Boom Bolt', 'Nitro Fists': 'Megalo Don\'s Nitro Fists'}

def Weapon_Slot(slot_name, slot_number):
    selected_weapon=None
    col1, col2, col3, col4 = st.columns(4)
    with col1: container_thing = st.container(border=True); container_thing.write(f'##### Current slot: :red[{slot_name}]')
    with col2: slot = st.selectbox(f'Item type', (['Disabled', 'Shotgun', 'SMG', 'Pistol', 'Assault-Rifle', 'Explosives', 'DMR', 'Other', 'Health']), help=f'Weapon type for :rainbow[slot {slot_number}]')
    with col3: selected_weapon = st.selectbox('Item', items.get(slot, []), help=f'Allowed items for item type (:rainbow[{slot_name}]).')
    if selected_weapon and items_images.get(selected_weapon) and os.path.exists(items_images.get(selected_weapon)): 
        with container_thing.expander('Image', expanded=True): st.image(items_images.get(selected_weapon))
    with col4: Slot_Rarity = st.selectbox('Item rarity', item_raritys.get(selected_weapon), help=f'If the weapon randomly selected doesn\'t have a valid rarity selected for it, it will randomly pick a rarity for the item, this will also happen if no rarity is selected. (Allowed raritys for :rainbow[slot {slot_number}].)') if slot not in ['Disabled', 'Health'] and selected_weapon!=None else st.selectbox('Allowed rarity', (), help=f'If the weapon randomly selected doesn\'t have a valid rarity selected for it, it will randomly pick a rarity for the item, this will also happen if no rarity is selected. (Allowed raritys for :rainbow[slot {slot_number}].)')
    if Slot_Rarity == 'Mythic' and selected_weapon != 'The Machinist\'s Combat Assault Rifle': selected_weapon = mythic_weapons[selected_weapon]
    st.divider(); return slot, Slot_Rarity, selected_weapon

def AttachmentViewer(rarity, slot_name, slot_number, slot, weapon_name, optic_options, magazine_options, underbarrel_options, barrel_options):
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1: 
        with st.container(border=True):
            with st.expander('Slot | Item', expanded=True if weapon_name is not None else False):
                st.write(f'##### Current slot: :red[{slot_name}]')
                st.write(f'##### Current item: :green[{weapon_name}]')#, help=f"Shows current weapon for :red[slot {slot_number}] (Auto selects attachments for mythic rarity weapons, doesn't keep old settings.)")
            with st.expander('image', expanded=False):
                if weapon_name != 'None' and items_images.get(weapon_name) is not None and os.path.exists(items_images.get(weapon_name)):  st.image(items_images.get(weapon_name))
    attachment1, attachment2, attachment3, attachment4 = col2.selectbox('Optic', optic_options, help=f"**Vertical Foregrip** - Improves ADS recoil and spread, **Angled Foregrip** - Reduces ADS time, **Laser** - Increases hipfire accuracy. (:red[{slot_name}])", disabled=True if rarity == "Mythic" or slot in ('Disabled', 'Other', 'Health') else False), col3.selectbox('Magazine', magazine_options, help=f"**Speed Mag** - Increases reload speed, **Drum Mag** - Larger magazine size. Decreases reload speed. (:red[{slot_name}])", disabled=True if rarity == "Mythic" or slot in ('Disabled', 'Other', 'Health') else False), col4.selectbox('Underbarrel', underbarrel_options, help=f"**Vertical Foregrip** - Improves ADS recoil and spread, **Angled Foregrip** - Reduces ADS time, **Laser** - Increases hipfire accuracy. (:red[{slot_name}])", disabled=True if rarity == "Mythic" or slot in ('Disabled', 'Other', 'Health') else False), col5.selectbox('Barrel', barrel_options, help=f"**Suppressor** - Reduces muzzle flash and dampens audio, **Muzzle Brake** - Reduces recoil. (:red[{slot_name}])", disabled=True if rarity == "Mythic" or slot in ('Disabled', 'Other', 'Health') else False)
    st.divider() 
    if rarity == 'Mythic': return map(lambda x: x[0], weapon_attachments.get(weapon_name))
    else: return attachment1, attachment2, attachment3, attachment4

def Random_Weapon():
    Slot = choice(['Shotgun', 'SMG', 'Pistol', 'Assault-Rifle', 'Explosives', 'DMR', 'Other', 'Health']); Selected_weapon = choice(items.get(Slot)); Slot_Rarity = choice(item_raritys.get(Selected_weapon))
    if Slot_Rarity == 'Mythic' and Selected_weapon != 'The Machinist\'s Combat Assault Rifle': Selected_weapon = mythic_weapons[Selected_weapon]
    Attachments = weapon_attachments.get(Selected_weapon); Attachment1, Attachment2, Attachment3, Attachment4 = choice(Attachments[0]), choice(Attachments[1]), choice(Attachments[2]), choice(Attachments[3])
    return Slot, Selected_weapon, Slot_Rarity, Attachment1, Attachment2, Attachment3, Attachment4

tab1, tab2, tab3, tab4 = st.tabs(["Customize", 'Weapon Mods', "Loadout", "Weapon Info"])
with tab1:
    slotone, slotone_rarity, slotone_weapon = Weapon_Slot("Slot 1", "1")
    slottwo, slottwo_rarity, slottwo_weapon = Weapon_Slot("Slot 2", "2")
    slotthree, slotthree_rarity, slotthree_weapon = Weapon_Slot("Slot 3", "3")
    slotfour, slotfour_rarity, slotfour_weapon = Weapon_Slot("Slot 4", "4")
    slotfive, slotfive_rarity, slotfive_weapon = Weapon_Slot("Slot 5", "5")
    col1, col2 = st.columns(2)
    with col1: container_thing = st.container(border=True); container_thing.write(f'##### :red[Medallions]')
    with col2: Medallion = ', '.join(st.multiselect('Select your :red-background[medallions]', Medallions))
    if Medallion: medallions_amount = f":blue[{len(Medallion.split(', '))}]"; pass
    else: Medallion, medallions_amount = 'Disabled', ':blue[0]'
with tab2:
    slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = AttachmentViewer(slotone_rarity, "Slot 1", "1", slotone, slotone_weapon, *weapon_attachments.get(slotone_weapon, [[],[],[],[]]) if slotone!='Disabled' else [[] for _ in range(4)])
    slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = AttachmentViewer(slottwo_rarity, "Slot 2", "2", slottwo, slottwo_weapon, *weapon_attachments.get(slottwo_weapon, [[],[],[],[]]) if slottwo!='Disabled' else [[] for _ in range(4)])
    slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = AttachmentViewer(slotthree_rarity, "Slot 3", "3", slotthree, slotthree_weapon, *weapon_attachments.get(slotthree_weapon, [[],[],[],[]]) if slotthree!='Disabled' else [[] for _ in range(4)])
    slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4 = AttachmentViewer(slotfour_rarity, "Slot 4", "4", slotfour, slotfour_weapon, *weapon_attachments.get(slotfour_weapon, [[],[],[],[]]) if slotfour!='Disabled' else [[] for _ in range(4)])
    slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = AttachmentViewer(slotfive_rarity, "Slot 5", "5", slotfive, slotfive_weapon, *weapon_attachments.get(slotfive_weapon, [[],[],[],[]]) if slotfive!='Disabled' else [[] for _ in range(4)])
with tab3:
    with st.sidebar:
        if st.button('Suprise me with a random loadout'):
            slotone, slotone_weapon, slotone_rarity, slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = Random_Weapon(); slottwo, slottwo_weapon, slottwo_rarity, slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = Random_Weapon(); slotthree, slotthree_weapon, slotthree_rarity, slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = Random_Weapon(); slotfour, slotfour_weapon, slotfour_rarity, slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4= Random_Weapon(); slotfive, slotfive_weapon, slotfive_rarity, slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = Random_Weapon(); Medallion = ', '.join(sample(Medallions, k=randint(1, 3))); medallions_amount = f":blue[1-3] (current: :blue[{{len(Medallion.split(', '))}}])"; st.toast('Go to the :blue-background[loadout page] to see your :orange[loadout]:violet-background[!]')
            st.session_state['slot1'] = [f'Item: :green[{slotone_weapon}]'  , f'Rarity: :orange[{slotone_rarity}]'  , f'Attachment 1: :red[{slotoneattachment1}]'  , f'Attachment 2: :red[{slotoneattachment2}]'  , f'Attachment 3: :red[{slotoneattachment4}]'  , f'Attachment 4: :red[{slotoneattachment4}]']; st.session_state['slot2'] = [f'Item: :green[{slottwo_weapon}]'  , f'Rarity: :orange[{slottwo_rarity}]'  , f'Attachment 1: :red[{slottwoattachment1}]'  , f'Attachment 2: :red[{slottwoattachment2}]'  , f'Attachment 3: :red[{slottwoattachment4}]'  , f'Attachment 4: :red[{slottwoattachment4}]']; st.session_state['slot3'] = [f'Item: :green[{slotthree_weapon}]', f'Rarity: :orange[{slotthree_rarity}]', f'Attachment 1: :red[{slotthreeattachment1}]', f'Attachment 2: :red[{slotthreeattachment2}]', f'Attachment 3: :red[{slotthreeattachment4}]', f'Attachment 4: :red[{slotthreeattachment4}]']; st.session_state['slot4'] = [f'Item: :green[{slotfour_weapon}]' , f'Rarity: :orange[{slotfour_rarity}]' , f'Attachment 1: :red[{slotfourattachment1}]' , f'Attachment 2: :red[{slotfourattachment2}]' , f'Attachment 3: :red[{slotfourattachment4}]' , f'Attachment 4: :red[{slotfourattachment4}]']; st.session_state['slot5'] = [f'Item: :green[{slotfive_weapon}]' , f'Rarity: :orange[{slotfive_rarity}]' , f'Attachment 1: :red[{slotfiveattachment1}]' , f'Attachment 2: :red[{slotfiveattachment2}]' , f'Attachment 3: :red[{slotfiveattachment4}]' , f'Attachment 4: :red[{slotfiveattachment4}]']; st.session_state['other'] = [f':blue[{Medallion}]', f':blue[{medallions_amount}]']
            if not os.path.exists(os.path.join('configs', 'AutoConfig_Custom.txt')): st.toast(':red[AutoConfig]\n\nCreated file :orange[Configs\\AutoConfig_Custom.txt]\n\nReason: File missing.')
            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'a') as f: f.write(f'{str(st.session_state)}\n'); f.close()
    col1, col2, col3 = st.columns(3)
    with col1:
        tab1b, tab2b, tab3b = st.tabs(["Regular", "Base", "Json"])
        with tab1b: t1 = st.empty(); t1.write(f'# :violet[Items]  \n##### Slot 1 : :green[{slotone_weapon}]\n#####    Slot 2 : :green[{slottwo_weapon}]\n#####    Slot 3 : :green[{slotthree_weapon}]\n#####    Slot 4 : :green[{slotfour_weapon}]\n#####    Slot 5 : :green[{slotfive_weapon}]\n##### Medallions : :blue[{Medallion}]')
        with tab2b: t2 = st.empty(); t2.write(f'# Items\n    Slot 1 : {slotone_weapon}\n    Slot 2 : {slottwo_weapon}\n    Slot 3 : {slotthree_weapon}\n    Slot 4 : {slotfour_weapon}\n    Slot 5 : {slotfive_weapon}\n    Medallions : {Medallion}')
        with tab3b: t3 = st.empty(); t3.json({'Items': [f'Slot 1 : {slotone_weapon}', f'Slot 2 : {slottwo_weapon}', f'Slot 3 : {slotthree_weapon}', f'Slot 4 : {slotfour_weapon}', f'Slot 5 : {slotfive_weapon}', f'Medallions : {Medallion}']})
    with col2:
        taba1, taba2, taba3 = st.tabs(["Regular", "Base", "Json"])
        with taba1: tt1 = st.empty(); tt1.write(f'# :violet[Rarity]  \n##### Slot 1 : :orange[{slotone_rarity}]\n#####    Slot 2 : :orange[{slottwo_rarity}]\n#####    Slot 3 : :orange[{slotthree_rarity}]\n#####    Slot 4 : :orange[{slotfour_rarity}]\n#####    Slot 5 : :orange[{slotfive_rarity}]\n#####    Medallions amount : {medallions_amount}')
        with taba2: tt2 = st.empty(); tt2.write(f'# Rarity\n    Slot 1 : {slotone_rarity}\n    Slot 2 : {slottwo_rarity}\n    Slot 3 : {slotthree_rarity}\n    Slot 4 : {slotfour_rarity}\n    Slot 5 : {slotfive_rarity}\n    Medallions amount : {medallions_amount}')
        with taba3: tt3 = st.empty(); tt3.json({'Rarity': [f'Slot 1 : {slotone_rarity}', f'Slot 2 : {slottwo_rarity}', f'Slot 3 : {slotthree_rarity}', f'Slot 4 : {slotfour_rarity}', f'Slot 5 : {slotfive_rarity}', f'Medallions amount : {medallions_amount}'], })
    with col3:
        taba1, taba2, taba3 = st.tabs(["Regular", "Base", "Json"])
        with taba1: ttt1 = st.empty(); ttt1.write(f'# :violet[Attachments]  \n##### Slot 1 : :red[{slotoneattachment1}], :red[{slotoneattachment2}], :red[{slotoneattachment3}], :red[{slotoneattachment4}]\n#####    Slot 2 : :red[{slottwoattachment1}], :red[{slottwoattachment2}], :red[{slottwoattachment3}], :red[{slottwoattachment4}]\n#####    Slot 3 : :red[{slotthreeattachment1}], :red[{slotthreeattachment2}], :red[{slotthreeattachment3}], :red[{slotthreeattachment4}]\n#####    Slot 4 : :red[{slotfourattachment1}], :red[{slotfourattachment2}], :red[{slotfourattachment3}], :red[{slotfourattachment4}]\n#####    Slot 5 : :red[{slotfiveattachment1}], :red[{slotfiveattachment2}], :red[{slotfiveattachment3}], :red[{slotfiveattachment4}]')
        with taba2: ttt2 = st.empty(); ttt2.write(f'# Attachments\n    Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}\n    Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}\n    Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}\n    Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}\n    Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}')
        with taba3: ttt3 = st.empty(); ttt3.json({'Attachments': [f'Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}', f'Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}', f'Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}', f'Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}', f'Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'], })
    st.divider()
    with st.popover('Load :red[AutoConfig]', help=':red[AutoConfig] will automatically save your config after every time you generate a new one (by pressing Randomize loadout), this means you\'ll never lose out on of your loadouts\n\n:red[AutoConfig] will stay disabled when you have no past config history', disabled=False if os.path.exists(os.path.join('Configs', 'AutoConfig_Custom.txt')) else True):
        col1, col2 = st.columns(2)
        if col1.button(':green[Manual config save]', use_container_width=True):
            st.session_state['slot1'] = [f'Item: :green[{slotone_weapon}]'  , f'Rarity: :orange[{slotone_rarity}]'  , f'Attachment 1: :red[{slotoneattachment1}]'  , f'Attachment 2: :red[{slotoneattachment2}]'  , f'Attachment 3: :red[{slotoneattachment4}]'  , f'Attachment 4: :red[{slotoneattachment4}]']; st.session_state['slot2'] = [f'Item: :green[{slottwo_weapon}]'  , f'Rarity: :orange[{slottwo_rarity}]'  , f'Attachment 1: :red[{slottwoattachment1}]'  , f'Attachment 2: :red[{slottwoattachment2}]'  , f'Attachment 3: :red[{slottwoattachment4}]'  , f'Attachment 4: :red[{slottwoattachment4}]']; st.session_state['slot3'] = [f'Item: :green[{slotthree_weapon}]', f'Rarity: :orange[{slotthree_rarity}]', f'Attachment 1: :red[{slotthreeattachment1}]', f'Attachment 2: :red[{slotthreeattachment2}]', f'Attachment 3: :red[{slotthreeattachment4}]', f'Attachment 4: :red[{slotthreeattachment4}]']; st.session_state['slot4'] = [f'Item: :green[{slotfour_weapon}]' , f'Rarity: :orange[{slotfour_rarity}]' , f'Attachment 1: :red[{slotfourattachment1}]' , f'Attachment 2: :red[{slotfourattachment2}]' , f'Attachment 3: :red[{slotfourattachment4}]' , f'Attachment 4: :red[{slotfourattachment4}]']; st.session_state['slot5'] = [f'Item: :green[{slotfive_weapon}]' , f'Rarity: :orange[{slotfive_rarity}]' , f'Attachment 1: :red[{slotfiveattachment1}]' , f'Attachment 2: :red[{slotfiveattachment2}]' , f'Attachment 3: :red[{slotfiveattachment4}]' , f'Attachment 4: :red[{slotfiveattachment4}]']; st.session_state['other'] = [f':blue[{Medallion}]', f':blue[{medallions_amount}]']
            if not os.path.exists(os.path.join('configs', 'AutoConfig_Custom.txt')): st.toast(':red[AutoConfig]\n\nCreated file :orange[Configs\\AutoConfig_Custom.txt]\n\nReason: File missing.')
            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'a') as f: f.write(f'{str(st.session_state)}\n'); f.close()
            st.toast(f'Your loadout was :rainbow[saved!]', icon='✅')
        if col2.toggle('Automatic config save', help='Will save a new config everytime you get any UI update'):
            st.session_state['slot1'] = [f'Item: :green[{slotone_weapon}]'  , f'Rarity: :orange[{slotone_rarity}]'  , f'Attachment 1: :red[{slotoneattachment1}]'  , f'Attachment 2: :red[{slotoneattachment2}]'  , f'Attachment 3: :red[{slotoneattachment4}]'  , f'Attachment 4: :red[{slotoneattachment4}]']; st.session_state['slot2'] = [f'Item: :green[{slottwo_weapon}]'  , f'Rarity: :orange[{slottwo_rarity}]'  , f'Attachment 1: :red[{slottwoattachment1}]'  , f'Attachment 2: :red[{slottwoattachment2}]'  , f'Attachment 3: :red[{slottwoattachment4}]'  , f'Attachment 4: :red[{slottwoattachment4}]']; st.session_state['slot3'] = [f'Item: :green[{slotthree_weapon}]', f'Rarity: :orange[{slotthree_rarity}]', f'Attachment 1: :red[{slotthreeattachment1}]', f'Attachment 2: :red[{slotthreeattachment2}]', f'Attachment 3: :red[{slotthreeattachment4}]', f'Attachment 4: :red[{slotthreeattachment4}]']; st.session_state['slot4'] = [f'Item: :green[{slotfour_weapon}]' , f'Rarity: :orange[{slotfour_rarity}]' , f'Attachment 1: :red[{slotfourattachment1}]' , f'Attachment 2: :red[{slotfourattachment2}]' , f'Attachment 3: :red[{slotfourattachment4}]' , f'Attachment 4: :red[{slotfourattachment4}]']; st.session_state['slot5'] = [f'Item: :green[{slotfive_weapon}]' , f'Rarity: :orange[{slotfive_rarity}]' , f'Attachment 1: :red[{slotfiveattachment1}]' , f'Attachment 2: :red[{slotfiveattachment2}]' , f'Attachment 3: :red[{slotfiveattachment4}]' , f'Attachment 4: :red[{slotfiveattachment4}]']; st.session_state['other'] = [f':blue[{Medallion}]', f':blue[{medallions_amount}]']
            if not os.path.exists(os.path.join('configs', 'AutoConfig_Custom.txt')): st.toast(':red[AutoConfig]\n\nCreated file :orange[Configs\\AutoConfig_Custom.txt]\n\nReason: File missing.')
            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'a') as f: f.write(f'{str(st.session_state)}\n'); f.close()
            #st.toast(f'Your loadout was :rainbow[saved!]', icon='✅')
        @st.experimental_dialog("Loadout preview")
        def preview(text):
            slot1,slot2,slot3,slot4,slot5,slot6 = st.tabs(['Slot 1', 'Slot 2', 'Slot 3', 'Slot 4', 'Slot 5', 'Medallions'])
            col1,col2=slot1.columns(2); col1.write(text.split('\n\n\n')[0]); (lambda: col2.image(items_images[text.split('\n\n\n')[0].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[0].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{text.split('\n\n\n')[0].split(": :green[")[1].split("]")[0]}'"))(); col1,col2=slot2.columns(2); col1.write(text.split('\n\n\n')[1]); (lambda: col2.image(items_images[text.split('\n\n\n')[1].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[1].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{text.split('\n\n\n')[0].split(": :green[")[1].split("]")[0]}'"))(); col1,col2=slot3.columns(2); col1.write(text.split('\n\n\n')[2]); (lambda: col2.image(items_images[text.split('\n\n\n')[2].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[2].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{text.split('\n\n\n')[0].split(": :green[")[1].split("]")[0]}'"))(); col1,col2=slot4.columns(2); col1.write(text.split('\n\n\n')[3]); (lambda: col2.image(items_images[text.split('\n\n\n')[3].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[3].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{text.split('\n\n\n')[0].split(": :green[")[1].split("]")[0]}'"))(); col1,col2=slot5.columns(2); col1.write(text.split('\n\n\n')[4]); (lambda: col2.image(items_images[text.split('\n\n\n')[4].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[4].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{text.split('\n\n\n')[0].split(": :green[")[1].split("]")[0]}'"))()
            slot6.write(text.split('\n\n\n')[5])
            if st.button('Exit'): st.rerun()
        if os.path.exists(os.path.join('Configs', 'AutoConfig_Custom.txt')):
            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'r') as f: g = f.readlines()
            for i in range(len(g)):
                line_data = eval(g[i])
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f'Loadout {i+1}', help=f'Load config {i+1}', use_container_width=True): slotone_weapon, slotone_rarity, slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = (line_data.get('slot1'))[0].split('[')[1].split(']')[0], (line_data.get('slot1'))[1].split('[')[1].split(']')[0], (line_data.get('slot1'))[2].split('[')[1].split(']')[0], (line_data.get('slot1'))[3].split('[')[1].split(']')[0], (line_data.get('slot1'))[4].split('[')[1].split(']')[0], (line_data.get('slot1'))[5].split('[')[1].split(']')[0]; slottwo_weapon, slottwo_rarity, slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = (line_data.get('slot2'))[0].split('[')[1].split(']')[0], (line_data.get('slot2'))[1].split('[')[1].split(']')[0], (line_data.get('slot2'))[2].split('[')[1].split(']')[0], (line_data.get('slot2'))[3].split('[')[1].split(']')[0], (line_data.get('slot2'))[4].split('[')[1].split(']')[0], (line_data.get('slot2'))[5].split('[')[1].split(']')[0]; slotthree_weapon, slotthree_rarity, slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = (line_data.get('slot3'))[0].split('[')[1].split(']')[0], (line_data.get('slot3'))[1].split('[')[1].split(']')[0], (line_data.get('slot3'))[2].split('[')[1].split(']')[0], (line_data.get('slot3'))[3].split('[')[1].split(']')[0], (line_data.get('slot3'))[4].split('[')[1].split(']')[0], (line_data.get('slot3'))[5].split('[')[1].split(']')[0]; slotfour_weapon, slotfour_rarity, slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4 = (line_data.get('slot4'))[0].split('[')[1].split(']')[0], (line_data.get('slot4'))[1].split('[')[1].split(']')[0], (line_data.get('slot4'))[2].split('[')[1].split(']')[0], (line_data.get('slot4'))[3].split('[')[1].split(']')[0], (line_data.get('slot4'))[4].split('[')[1].split(']')[0], (line_data.get('slot4'))[5].split('[')[1].split(']')[0]; slotfive_weapon, slotfive_rarity, slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = (line_data.get('slot5'))[0].split('[')[1].split(']')[0], (line_data.get('slot5'))[1].split('[')[1].split(']')[0], (line_data.get('slot5'))[2].split('[')[1].split(']')[0], (line_data.get('slot5'))[3].split('[')[1].split(']')[0], (line_data.get('slot5'))[4].split('[')[1].split(']')[0], (line_data.get('slot5'))[5].split('[')[1].split(']')[0]; Medallion=(line_data.get("other"))[0]; medallions_amount=(line_data.get("other"))[1]; t1.write(f'# :violet[Items]  \n##### Slot 1 : :green[{slotone_weapon}]\n#####    Slot 2 : :green[{slottwo_weapon}]\n#####    Slot 3 : :green[{slotthree_weapon}]\n#####    Slot 4 : :green[{slotfour_weapon}]\n#####    Slot 5 : :green[{slotfive_weapon}]\n#####    Medallions : :blue[{Medallion}]');  t2.write(f'# Items\n    Slot 1 : {slotone_weapon}\n    Slot 2 : {slottwo_weapon}\n    Slot 3 : {slotthree_weapon}\n    Slot 4 : {slotfour_weapon}\n    Slot 5 : {slotfive_weapon}\n    Medallions : {Medallion}');  t3.json({'Items': [f'Slot 1 : {slotone_weapon}', f'Slot 2 : {slottwo_weapon}', f'Slot 3 : {slotthree_weapon}', f'Slot 4 : {slotfour_weapon}', f'Slot 5 : {slotfive_weapon}', f'Medallions : {Medallion}'],});  tt1.write(f'# :violet[Rarity]  \n##### Slot 1 : :orange[{slotone_rarity}]\n#####    Slot 2 : :orange[{slottwo_rarity}]\n#####    Slot 3 : :orange[{slotthree_rarity}]\n#####    Slot 4 : :orange[{slotfour_rarity}]\n#####    Slot 5 : :orange[{slotfive_rarity}]\n#####    Medallions amount : :blue[{medallions_amount}]');  tt2.write(f'# Rarity\n    Slot 1 : {slotone_rarity}\n    Slot 2 : {slottwo_rarity}\n    Slot 3 : {slotthree_rarity}\n    Slot 4 : {slotfour_rarity}\n    Slot 5 : {slotfive_rarity}\n    Medallions amount : {medallions_amount}');  tt3.json({'Rarity': [f'Slot 1 : {slotone_rarity}', f'Slot 2 : {slottwo_rarity}', f'Slot 3 : {slotthree_rarity}', f'Slot 4 : {slotfour_rarity}', f'Slot 5 : {slotfive_rarity}', f'Medallions amount : {medallions_amount}'], });  ttt1.write(f'# :violet[Attachments]  \n##### Slot 1 : :red[{slotoneattachment1}], :red[{slotoneattachment2}], :red[{slotoneattachment3}], :red[{slotoneattachment4}]\n#####    Slot 2 : :red[{slottwoattachment1}], :red[{slottwoattachment2}], :red[{slottwoattachment3}], :red[{slottwoattachment4}]\n#####    Slot 3 : :red[{slotthreeattachment1}], :red[{slotthreeattachment2}], :red[{slotthreeattachment3}], :red[{slotthreeattachment4}]\n#####    Slot 4 : :red[{slotfourattachment1}], :red[{slotfourattachment2}], :red[{slotfourattachment3}], :red[{slotfourattachment4}]\n#####    Slot 5 : :red[{slotfiveattachment1}], :red[{slotfiveattachment2}], :red[{slotfiveattachment3}], :red[{slotfiveattachment4}]');  ttt2.write(f'# Attachments\n    Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}\n    Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}\n    Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}\n    Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}\n    Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'); ttt3.json({'Attachments': [f'Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}', f'Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}', f'Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}', f'Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}', f'Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'], }); st.toast(f':red[AutoConfig]\n\n:blue[Loaded configuration] from file: :orange[configs\\AutoConfig_Custom.txt]', icon="✨")
                with col2:
                    if st.button('Loadout preview', help=f'Preview the loadout for slot {i+1}', use_container_width=True): preview(f'Item: :green[{(line_data.get("slot1"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot1"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot1"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot2"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot2"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot2"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot3"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot3"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot3"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot4"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot4"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot4"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot5"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot5"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot5"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[5].split("[")[1].split("]")[0]}]\n\n\nMedallions: :blue[{(line_data.get("other"))[0]}]\n\nMedallions amount: :blue[{(line_data.get("other"))[1]}]')
                with col3:
                    if st.button(':red[Remove loadout]', help=f'Remove loadout {i+1}', use_container_width=True):
                        st.session_state.deleted_loadout_index = i
                        if st.session_state.deleted_loadout_index is not None:
                            i = st.session_state.deleted_loadout_index
                            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'r') as f: lines = f.readlines(), f.close()
                            with open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'w') as f:
                                for index, line in enumerate(lines[0]):
                                    if index != i: f.write(line)
                            st.toast('Loadout deleted.'); st.session_state.deleted_loadout_index = None; st.rerun()
                if i+1 != len(g): st.divider()
                    
        else: st.toast(':red[AutoConfig]\n\nCreated file: :orange[Configs\\AutoConfig_Custom.txt]\n\nReason: File missing.'); f = open(os.path.join('configs', 'AutoConfig_Custom.txt'), 'a'); f.close()
with st.sidebar:
    st.page_link("http://www.Github.com/fuzzybuzzyboy/py", label="Github", icon="🛢️")
