import os, streamlit as st # type: ignore
from random import randint, sample, choice
st.set_page_config(page_title='Loadout Generater', page_icon="🤑", layout="wide", initial_sidebar_state="expanded", menu_items={'Get help': 'https://github.com/fuzzybuzzyboy/py', 'Report a bug': "https://github.com/fuzzybuzzyboy/py", 'About': "Random items generator for fortnite (no this doesn't inject into your game and do something blah blah blah)"})
medallions_amount, medallions_amount_text=0, '1-'
slotoneattachment1=slotoneattachment2=slotoneattachment3=slotoneattachment4=slottwoattachment1=slottwoattachment2=slottwoattachment3=slottwoattachment4=slotthreeattachment1=slotthreeattachment2=slotthreeattachment3=slotthreeattachment4=slotfourattachment1=slotfourattachment2=slotfourattachment3=slotfourattachment4=slotfiveattachment1=slotfiveattachment2=slotfiveattachment3=slotfiveattachment4=None
slotone=slotone_rarity=slotone_weapon=slottwo=slottwo_rarity=slottwo_weapon=slotthree=slotthree_rarity=slotthree_weapon=slotfour=slotfour_rarity=slotfour_weapon=slotfive=slotfive_rarity=slotfive_weapon='Disabled'

item_types=['Disabled', 'Shotgun', 'SMG', 'Pistol', 'Assault-Rifle', 'Explosives', 'Snipers', 'DMR', 'Other', 'Health']
items = {'Shotgun': ['Hammer Pump Shotgun', 'Combat Shotgun', 'Frenzy Auto Shotgun', 'Gatekeeper Shotgun'],  'SMG': ['Thunder Burst SMG', 'Harbinger SMG'],  'Pistol': ['Ranger Pistol', 'Hand Cannon'],  'Assault-Rifle': ['Combat Assault Rifle', 'Warforged Assault Rifle', 'Tactical Assault Rifle', 'Enforcer AR'], 'Snipers': ['Heavy Impact Sniper Rifle',],  'Explosives': ['Boom Bolt', 'Remote Explosive', 'Shield Breaker EMP'],  'DMR': ['Huntress DMR'],  'Other': ['Nitro Fists', 'Tow Hook Cannon', 'Crash Pad Jr.', 'Repair Torch', 'Magneto Power'],  'Health': ['Nitro Splash', 'Nuka-Cola', 'Shield Potion', 'Small Shield Potion', 'Flowberry Fizz', 'Medkit',]}
item_raritys = {'Hammer Pump Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Combat Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Frenzy Auto Shotgun': ['Mythic',], 'Gatekeeper Shotgun': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Thunder Burst SMG': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Harbinger SMG': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Ranger Pistol': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Hand Cannon': ['Rare', 'Epic', 'Legendary', 'Mythic'], 'Combat Assault Rifle': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], 'Warforged Assault Rifle': ['Common', 'Uncommon', 'Rare', 'Epic'], 'Tactical Assault Rifle': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Enforcer AR': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Boom Bolt': ['Rare', 'Epic', 'Legendary', 'Mythic'], 'Shield Breaker EMP': ['Rare'], 'Remote Explosive': ['Epic'], 'Heavy Impact Sniper Rifle': ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary'], 'Huntress DMR': ['Uncommon', 'Rare', 'Epic', 'Legendary'], 'Nitro Fists': ['Epic', 'Mythic'],  'Tow Hook Cannon': ['Rare'], 'Crash Pad Jr.': ['Uncommon',],  'Repair Torch': ['Rare'],  'Magneto Power': ['Rare'], 'Nitro Splash': ['Rare'], 'Nuka-Cola': ['Epic'], 'Shield Potion': ['Rare',], 'Flowberry Fizz': ['Rare',], 'Small Shield Potion': ['Uncommon',], 'Medkit': ['Uncommon',],}
weapon_attachments = {'Hammer Pump Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Combat Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']],'Megalo Don\'s Combat Shotgun': [['Holo-13 Optic'], ['Speed Mag'], ['Laser'], ['Muzzle Brake']],'Frenzy Auto Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Oscar\'s Frenzy Auto Shotgun': [['Red Eye Sight'], ['Drum Mag'], ['Vertical Foregrip'], ['Muzzle Brake']],'Gatekeeper Shotgun': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake']], 'Cerberus\' Gatekeeper Shotgun': [['None', ], ['Speed Mag', ], ['Speed Foregrip', ], ['Muzzle Brake', ]], 'Thunder Burst SMG': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Harbinger SMG': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Ranger Pistol': [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']], 'Hand Cannon': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'Thermal Scope', 'Sniper Scope'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Laser'], ['None', 'Muzzle Brake', 'Suppressor']], 'Conducter Hand Cannon': [['Holo-13 Optic'], ['Speed Mag'], ['Laser'], ['Muzzle Brake']], 'The Machinist\'s Combat Assault Rifle': [['Red Eye Sight'], ['Drum Mag'], ['Vertical Foregrip'], ['Suppressor']], 'Combat Assault Rifle': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Speed Mag', 'Drum Mag'], ['None', 'Vertical Foregrip', 'Angled Foregrip', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Warforged Assault Rifle': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Enforcer AR': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Tactical Assault Rifle': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Huntress DMR': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Thermal Optic', 'Sniper Optic'], ['None', 'Drum Mag', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']], 'Heavy Impact Sniper Rifle': [['Sniper Optic'], ['None',], ['None',], ['Muzzle Brake']], 'Boom Bolt': [['None', 'Red Eye Sight', 'Holo-13 Optic', 'Thermal Scope', 'Sniper Scope'], ['None', 'Drum Mag', 'Speed Mag'], ['Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None']], 'Ringmaster\'s Boom Bolt': [['Holo-13 Optic'], ['Drum Mag'], ['Speed Foregrip'], ['None']], 'Megalo Don\'s Nitro Fists': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nitro Fists': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Shockwave Grenade': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Boogie Bomb': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nitro Splash': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Nuka-Cola': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Shield Potion': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Flowberry Fizz': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Small Shield Potion': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]], 'Medkit': [['Disabled', ], ['Disabled', ], ['Disabled', ], ['Disabled', ]]}
#@st.dialog('Custom item', width="Large")
#def custom_item():
#    rarity = []
#    slot = st.selectbox('Item type', ['Shotgun', 'SMG', 'Pistol', 'Assault-Rifle', 'Explosives', 'Snipers', 'DMR', 'Other', 'Health'], index=None)
#    name = st.text_input('Item name', max_chars=50, disabled=True if slot == 'Disabled' else False)
#    rarity1, rarity2, rarity3, rarity4, rarity5, rarity6 = st.columns(6)
#    rarity1_rarity = rarity1.checkbox('a', label_visibility='collapsed', help='Common rarity.', disabled=True if not slot and name != '' else False); rarity1.caption(f'{':gray-background[' if not rarity1_rarity else ':green-background['}:gray[Common]]'); rarity.append(rarity1_rarity)
#    rarity2_rarity = rarity2.checkbox('b', label_visibility='collapsed', help='Uncommon rarity.', disabled=True if not slot and name != '' else False); rarity2.caption(f'{':gray-background[' if not rarity2_rarity else ':green-background['}:green[Uncommon]]'); rarity.append(rarity2_rarity)
#    rarity3_rarity = rarity3.checkbox('c', label_visibility='collapsed', help='Rare rarity.', disabled=True if not slot and name != '' else False); rarity3.caption(f'{':gray-background[' if not rarity3_rarity else ':green-background['}:blue[Rare]]'); rarity.append(rarity3_rarity)
#    rarity4_rarity = rarity4.checkbox('d', label_visibility='collapsed', help='Epic rarity.', disabled=True if not slot and name != '' else False); rarity4.caption(f'{':gray-background[' if not rarity4_rarity else ':green-background['}:violet[Epic]]'); rarity.append(rarity4_rarity)
#    rarity5_rarity = rarity5.checkbox('e', label_visibility='collapsed', help='Legendary rarity.', disabled=True if not slot and name != '' else False); rarity5.caption(f'{':gray-background[' if not rarity5_rarity else ':green-background['}:orange[Legendary]]'); rarity.append(rarity5_rarity)
#    rarity6_rarity = rarity6.checkbox('f', label_visibility='collapsed', help='Mythic rarity.', disabled=True if not slot and name != '' else False); rarity6.caption(f'{':gray-background[' if not rarity6_rarity else ':green-background['}:red[Mythic]]'); rarity.append(rarity6_rarity)
#    col1, col2 = st.columns(2); confirm_button = col1.button('Add item', disabled=True if not slot and name != '' and not rarity else False)
#    print(f'{'Common' if rarity1_rarity else ''}, {'Uncommon' if rarity2_rarity else ''}, {'Rare' if rarity3_rarity else ''}, {'Epic' if rarity4_rarity else ''}, {'Legendary' if rarity5_rarity else ''}, {'Mythic' if rarity6_rarity else ''}')
#    print(slot, name)
#    if confirm_button: items[slot].append(name); item_raritys[name] = ['Common' if rarity1_rarity else '', 'Uncommon' if rarity2_rarity else '', 'Rare' if rarity3_rarity else '', 'Epic' if rarity4_rarity else '','Legendary' if rarity5_rarity else '', 'Mythic' if rarity6_rarity else '',]; st.rerun(); st.toast('Created item')
#    st.rerun() if col2.button('exit') else ''
#
#if st.sidebar.button('Create a custom item', use_container_width=True): custom_item()
#for i in range(2): 
#    type_name = f'debug{i}'
#    item_types.insert(i+3, type_name)
#    if type_name not in items: items[type_name] = []
#    for b in range(4):
#        items[type_name].append(f'test{b+1}')
#        item_raritys[f'test{b+1}'] = ['Epic', 'Legendary', 'Mythic']
#        weapon_attachments[f'test{b+1}'] = [['None', 'Red Eye Sight', 'Holo-13 Optic'], ['None', 'Speed Mag'], ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speed Foregrip'], ['None', 'Muzzle Brake', 'Suppressor']]

Medallions=('The Machinist\'s Medallion', 'Ringmaster Scarr\'s Medallion', 'Megalo Don\'s Medallion')
items_images={'Hammer Pump Shotgun': os.path.join('item_images', 'Shotgun', 'HammerPumpShotgun.webp'), 'Frenzy Auto Shotgun': os.path.join('item_images', 'Shotgun', 'FrenzyAutoShotgun.webp'), 'Oscar\'s Frenzy Auto Shotgun': os.path.join('item_images', 'Shotgun', 'FrenzyAutoShotgun.webp'), 'Combat Shotgun': os.path.join('item_images', 'Shotgun', 'CombatShotgun.webp'), 'Megalo Don\'s Combat Shotgun': os.path.join('item_images', 'Shotgun', 'CombatShotgun.webp'), 'Gatekeeper Shotgun': os.path.join('item_images', 'Shotgun', 'GatekeeperShotgun.webp'), 'Cerberus\' Gatekeeper Shotgun': os.path.join('item_images', 'Shotgun', 'GatekeeperShotgun.webp'),'Thunder Burst SMG': os.path.join('item_images', 'SMG', 'ThunderBurstSMG.webp'), 'Harbinger SMG': os.path.join('item_images', 'SMG', 'HarbingerSMG.webp'),'Ranger Pistol': os.path.join('item_images', 'Pistol', 'RangerPistol.webp'), 'Hand Cannon': os.path.join('item_images', 'Pistol', 'HandCannon.webp'), 'Conducter Hand Cannon': os.path.join('item_images', 'Pistol', 'HandCannon.webp'), 'The Machinist\'s Combat Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'CombatAR.webp'), 'Combat Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'CombatAR.webp'), 'Warforged Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'WarforgedAssaultRifle.webp'), 'Tactical Assault Rifle': os.path.join('item_images', 'Assault-Rifle', 'TacticalAssaultRifle.webp'), 'Enforcer AR': os.path.join('item_images', 'Assault-Rifle', 'EnforcerAR.webp'),'Huntress DMR': os.path.join('item_images', 'DMR', 'HuntressDMR.webp'), 'Boom Bolt': os.path.join('item_images', 'Explosives', 'BoomBolt.webp'), 'Heavy Impact Sniper Rifle': os.path.join('Item_images', 'Snipers', 'HeavyImpactSniperRifle.Webp'), 'Ringmaster\'s Boom Bolt': os.path.join('item_images', 'Explosives', 'BoomBolt.webp'),'Nitro Fists': os.path.join('item_images', 'Other', 'NitroFists.webp'), 'Megalo Don\'s Nitro Fists': os.path.join('item_images', 'Other', 'NitroFists.webp'), 'Shockwave Grenade': os.path.join('item_images', 'Other', 'ShockwaveGrenade.webp'), 'Boogie Bomb': os.path.join('item_images', 'Other', 'BoogieBomb.webp'), 'Nitro Splash': os.path.join('item_images', 'Health', 'NitroSplash.webp'), 'Nuka-Cola': os.path.join('item_images', 'Health', 'NukaCola.webp'), 'Flowberry Fizz': os.path.join('item_images', 'Health', 'FlowBerryFizz.webp'), 'Shield Potion': os.path.join('item_images', 'Health', 'ShieldPotion.webp'), 'Small Shield Potion': os.path.join('item_images', 'Health', 'SmallShieldPotion.webp'), 'Medkit': os.path.join('item_images', 'Health', 'Medkit.webp')}
mythic_weapons = {'Combat Shotgun': 'Megalo Don\'s Combat Shotgun', 'Frenzy Auto Shotgun': 'Oscar\'s Frenzy Auto Shotgun', 'Gatekeeper Shotgun': 'Cerberus\' Gatekeeper Shotgun', 'Combat Assault Rifle': 'The Machinist\'s Combat Assault Rifle', 'Hand Cannon': 'Conducter Hand Cannon', 'Boom Bolt': 'Ringmaster\'s Boom Bolt', 'Nitro Fists': 'Megalo Don\'s Nitro Fists'}
item_infos = {
    'Hammer Pump Shotgun': [['85 :orange[Damage]', '157.25 :red[Headshot damage]', '0.7/S :grey[Firerate]', '6 :green[Clip size]', '5.78S :grey[Reload time]'], ['89 :orange[Damage]', '164.65 :red[Headshot damage]', '0.7/S :grey[Firerate]', '6 :green[Clip size]', '5.51S :grey[Reload time]'], ['94 :orange[Damage]', '173.9 :red[Headshot damage]', '0.7/S :grey[Firerate]', '6 :green[Clip size]', '5.25S :grey[Reload time]'], ['99 :orange[Damage]', '183.15 :red[Headshot damage]', '0.7/S :grey[Firerate]', '6 :green[Clip size]', '4.99S :grey[Reload time]'], ['103 :orange[Damage]', '190.55 :red[Headshot damage]', '0.7/S :grey[Firerate]', '6 :green[Clip size]', '4.72S :grey[Reload time]']],
    'Combat Shotgun'     : [['61 :orange[Damage]', '91.5 :red[Headshot damage]'  , '1.7/S :grey[Firerate]', '8 :green[Clip size]', '5.5S :grey[Reload time]' ], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Frenzy Auto Shotgun': [['61 :orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', '8 :green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', '8 :green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', '8 :green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', '8 :green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', '8 :green[Clip size]', ':grey[Reload time]'], ['78 :orange[Damage]', '128.7 :red[Headshot damage]', ':grey[Firerate]', '12 :green[Clip size]', ':grey[Reload time]']],
    'Gatekeeper Shotgun' : [[':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]'], [':orange[Damage]', ':red[Headshot damage]', ':grey[Firerate]', ':green[Clip size]', ':grey[Reload time]']],

    'Thunder Burst SMG'  : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Harbinger SMG'      : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Ranger Pistol'      : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Hand Cannon'        : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],

    'The Machinist\'s Combat Assault Rifle': [['25 :orange[Damage]', '37.5 :red[Headshot damage]', '8.8/S :grey[Firerate]', '35 :green[Clip size]', '3.16S :grey[Reload time]']],
    'Warforged Assault Rifle'              : [['24 :orange[Damage]', '36 :red[Headshot damage]', '7.2/S :gray[Firerate]', '35 :green[Clip size]', '3.85S :grey[Reload time]'], ['26 :orange[Damage]', '39 :red[Headshot damage]', '7.2/S :gray[Firerate]', '35 :green[Clip size]', '3.67S :grey[Reload time]'], ['27 :orange[Damage]', '40.5 :red[Headshot damage]', '7.2/S :gray[Firerate]', '35 :green[Clip size]', '3.5S :grey[Reload time]'], ['28 :orange[Damage]', '42 :red[Headshot damage]', '7.2/S :gray[Firerate]', '35 :green[Clip size]', '3.33S :grey[Reload time]'], ['30 :orange[Damage]', '45 :red[Headshot damage]', '7.2/S :gray[Firerate]', '35 :green[Clip size]', '3.15S :grey[Reload time]']],
    'Tactical Assault Rifle'               : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Enforcer AR'                          : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],

    'Boom Bolt'   : [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    'Huntress DMR': [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],
    
    }

def Weapon_Slot(slot_name, slot_number, slot_type, slot_weapon, slot_rarity):
    selected_weapon=None
    col1, col2, col3, col4 = st.columns(4)
    container_thing = col1.container(border=True); col1_, col2_ = container_thing.columns(2); col1_.write(f'##### Current slot: :red[{slot_name}]'); ignore = col2_.popover('Image', use_container_width=True, help='Display an image of the currently selected item') 
    slot = col2.selectbox(f'Item type', (item_types), help=f'Weapon type for :red[slot {slot_number}]', placeholder=slot_type)
    slot_allowed = col3.multiselect('Allowed items', items.get(slot, []), placeholder='Pick your items', help=f'Allowed items for item type (:red[{slot_name}]).'); selected_weapon=choice(slot_allowed) if slot_allowed else None
    (lambda: ignore.image(items_images[selected_weapon], f'Image of the \'{selected_weapon}\'', use_column_width=True) if selected_weapon in items_images else ignore.caption(f"No image found for item: ':red[{selected_weapon}]'\n\n:red-background[Reason]: {'No :green[item type] and :green[item] is selected.' if slot == 'Disabled' and not slot_allowed and not selected_weapon else 'No :green[item] is selected.' if slot != 'Disabled' and not slot_allowed or not selected_weapon else f'the :green[item\'s] image is not found in the :blue[{os.path.join('items_images', slot)}] folder. \n\n :red-background[Possible fix]: Check if the image is in the folder or in the \':blue[item_images]\' dict in the code.' if selected_weapon != 'None' and selected_weapon not in items_images else 'Unknown reason.'}"))()
    slot_rarity_allowed = col4.multiselect('Allowed rarity', ["Common", 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], placeholder='Pick your raritys', help=f'If the weapon randomly selected doesn\'t have a valid rarity selected for it, it will randomly pick a rarity for the item, this will also happen if no rarity is selected. (Allowed raritys for :red[slot {slot_number}].)') if slot != 'Disabled' and selected_weapon!=None else col4.multiselect('Allowed rarity', (), help=f'If the weapon randomly selected doesn\'t have a valid rarity selected for it, it will randomly pick a rarity for the item, this will also happen if no rarity is selected. (Allowed raritys for :red[slot {slot_number}].)'); Slot_Rarity = choice([r if r in item_raritys.get(selected_weapon, []) else choice(item_raritys.get(selected_weapon, [])) for r in slot_rarity_allowed]) if slot_rarity_allowed and slot != 'Disabled' and slot_allowed else None; Slot_Rarity = 'No rarity selected' if slot!='Disabled' and slot_allowed and not slot_rarity_allowed else Slot_Rarity if slot_rarity_allowed else 'None'; Slot_Rarity = choice(item_raritys.get(selected_weapon)) if Slot_Rarity == 'No rarity selected' else Slot_Rarity; selected_weapon = mythic_weapons[selected_weapon] if Slot_Rarity == 'Mythic' else selected_weapon
    st.divider(); return slot, Slot_Rarity, selected_weapon
def Random_Weapon():
    Slot = choice([item for item in item_types if item != 'Disabled']); Selected_weapon = choice(items.get(Slot)); Slot_Rarity = choice(item_raritys.get(Selected_weapon)); Selected_weapon = mythic_weapons[Selected_weapon] if Slot_Rarity == 'Mythic' else Selected_weapon; Attachments = weapon_attachments.get(Selected_weapon) if Selected_weapon != 'Boom Bolt' and Slot not in ['Other', 'Health', 'Explosives'] else [['Disabled'], ['Disabled'], ['Disabled'], ['Disabled']]; Attachment1, Attachment2, Attachment3, Attachment4 = choice(Attachments[0]), choice(Attachments[1]), choice(Attachments[2]), choice(Attachments[3])
    # DEBUGGING FOR 'Random_Weapon()' Funtion # st.caption(f'Weapon Type: :blue[{Slot}]'); st.caption(f'Weapon: :green[{Selected_weapon}]'); a = st.popover('Rarity', help=f'Shows the current weapon\'s rarity', use_container_width=True); a.caption(f'Rarity: :{'gray' if Slot_Rarity == 'Common' else 'green' if Slot_Rarity == 'Uncommon' else 'blue' if Slot_Rarity == 'Rare' else 'violet' if Slot_Rarity == 'Epic' else 'orange' if Slot_Rarity == 'Legendary' else 'red' if Slot_Rarity == 'Mythic' else 'rainbow' if Slot_Rarity == 'Exotic' else ''}[{Slot_Rarity}]'); st.caption(f'Attachments: :red[{Attachment1}], :red[{Attachment2}], :red[{Attachment3}], :red[{Attachment4}]'); st.divider()
    return Slot, Selected_weapon, Slot_Rarity, Attachment1, Attachment2, Attachment3, Attachment4
def AttachmentViewer(rarity, slot_name, slot_number, slot, weapon_name):
    col1, col2, col3, col4, col5 = st.columns(5)
    container_thing = col1.container(border=True); col1_, col2_ = container_thing.columns(2); ignore_text = col1_.popover(f'Slot | Item', use_container_width=True); ignore = col2_.popover('Image', use_container_width=True, help='Display an image of the currently selected item') 
    ignore_text.write(f'##### Current slot: :red[{slot_name}]\n\n##### Current item: :red[{weapon_name}]')
    (lambda: ignore.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else ignore.caption(f"No image found for item: ':red[{weapon_name}]'"))()
    attachment1 = col2.multiselect('Optic', ['None', 'Red Eye Sight', 'Holo-13 Optic', 'P2X Optic', 'Sniper Scope', 'Thermal Optic'], help=f"**:orange[Default Iron Sights (None)]**: No modifications.\n\n**:orange[Red Eye Sight]**: x1.15 magnification.\n\n**:orange[Holo-13 Optic]**: x1.3 magnification.\n\n**:orange[P2X Optic]**: x2 magnification.\n\n**:orange[Thermal Optic]**: x2.1 magnification (Togglable Thermal Vision).\n\n**:orange[Sniper Scope]**: x4 magnification (Enables sniper glare).\n\nEditing optic for :red[slot {slot_number}].", disabled=True if weapon_name != 'Boom Bolt' and rarity == 'Mythic' or slot in ['Disabled', 'Other', 'Health', 'Snipers', 'Explosives'] or weapon_name is None else False); weapon_attachments_list = [attachment for sublist in weapon_attachments.get(weapon_name, []) for attachment in sublist]; valid_attachments = [a for a in attachment1 if a in weapon_attachments_list]; attachment1 = choice(valid_attachments) if valid_attachments else 'None' if attachment1 else 'None'; attachment2 = col3.multiselect('Magazine', ['None', 'Drum Mag', 'Speed Mag'], help=f"**:orange[Default Mag (None)]**: No modifications.\n\n**:orange[Drum Mag]**: Increases magazine size (Decreases reload speed).\n\n**:orange[Speed Mag]**: Increases reload speed.\n\nEditing magazine for :red[slot {slot_number}].", disabled=True if weapon_name != 'Boom Bolt' and rarity == 'Mythic' or slot in ['Disabled', 'Other', 'Health', 'Snipers', 'Explosives'] or weapon_name is None else False); weapon_attachments_list = [attachment for sublist in weapon_attachments.get(weapon_name, []) for attachment in sublist]; valid_attachments = [a for a in attachment2 if a in weapon_attachments_list]; attachment2 = choice(valid_attachments) if valid_attachments else 'None' if attachment2 else 'None'; attachment3 = col4.multiselect('Underbarrel', ['None', 'Angled Foregrip', 'Vertical Foregrip', 'Laser', 'Speedgrip'], help=f"**:orange[Default Underbarrel (None)]**: No modifications.\n\n**:orange[Angled Foregrip]**: Reduces ADS time.\n\n**:orange[Vertical Foregrip]**: Improves ADS recoil and spread.\n\n**:orange[Laser]**: Increases hipfire accuracy.\n\n**:orange[Speedgrip]**: Increases movement speed while aiming.\n\nEditing underbarrel for :red[slot {slot_number}].", disabled=True if weapon_name != 'Boom Bolt' and rarity == 'Mythic' or slot in ['Disabled', 'Other', 'Health', 'Snipers', 'Explosives'] or weapon_name is None else False); weapon_attachments_list = [attachment for sublist in weapon_attachments.get(weapon_name, []) for attachment in sublist]; valid_attachments = [a for a in attachment3 if a in weapon_attachments_list]; attachment3 = choice(valid_attachments) if valid_attachments else 'None' if attachment3 else 'None'; attachment4 = col5.multiselect('Barrel', ['None', 'Muzzle Brake', 'Suppressor'], help=f"**:orange[Default Barrel (None)]**: No modifications.\n\n**:orange[Muzzle Brake]**: Reduces recoil.\n\n**:orange[Suppressor]**: Reduces muzzle flash and dampens audio.\n\nEditing barrel for :red[slot {slot_number}].", disabled=True if weapon_name != 'Boom Bolt' and rarity == 'Mythic' or slot in ['Disabled', 'Other', 'Health', 'Snipers', 'Explosives'] or weapon_name is None else False); weapon_attachments_list = [attachment for sublist in weapon_attachments.get(weapon_name, []) for attachment in sublist]; valid_attachments = [a for a in attachment4 if a in weapon_attachments_list]; attachment4 = choice(valid_attachments) if valid_attachments else 'None' if attachment4 else 'None'
    st.divider() 
    if rarity == 'Mythic' or weapon_name == 'Heavy Impact Sniper Rifle': return map(lambda x: x[0], weapon_attachments.get(weapon_name))
    elif weapon_name != 'Boom Bolt' and weapon_name and slot in ['Other', 'Health', 'Explosives']: return 'Disabled', 'Disabled', 'Disabled', 'Disabled'
    else: attachment1, attachment2, attachment3, attachment4 = attachment1, attachment2, attachment3, attachment4; return attachment1, attachment2, attachment3, attachment4

Customize, Weapon_mods, Loadout, Weapon_Info = st.tabs(["Customize", "Weapon Mods", "Loadout", "Weapon Info"])
with Customize: slotone, slotone_rarity, slotone_weapon = Weapon_Slot("Slot 1", "1", slotone, slotone_weapon, slotone_rarity); slottwo, slottwo_rarity, slottwo_weapon = Weapon_Slot("Slot 2", "2", slottwo, slottwo_weapon, slottwo_rarity); slotthree, slotthree_rarity, slotthree_weapon = Weapon_Slot("Slot 3", "3", slotthree, slotthree_weapon, slotthree_rarity); slotfour, slotfour_rarity, slotfour_weapon = Weapon_Slot("Slot 4", "4", slotfour, slotfour_weapon, slotfour_rarity); slotfive, slotfive_rarity, slotfive_weapon = Weapon_Slot("Slot 5", "5", slotfive, slotfive_weapon, slotfive_rarity); col1, col2, col3, col4 = st.columns(4); text = col1.container(border=True); text.write(f'##### :red[Medallions]'); slotsix = col2.selectbox('Medallions', ('Disabled', 'Enabled'), help='Will enable or disable the medallions'); medallions_amount = col3.selectbox('Amount of medallions', list(range(1, len(Medallions) + 1)), help=f'Example, if selected {len(Medallions)}, it will select 1-{len(Medallions)} medallions from a random list.') if slotsix == 'Enabled' else col3.selectbox('Amount of medallions', [], help=f'Example, if selected {len(Medallions)}, it will select 1-{len(Medallions)} medallions from a random list.'); slotsix_randomness = col4.selectbox('Randomness', ['Enabled', 'Disabled'], help=f'If enabled it will randomly select from (lets say you selected {len(Medallions)}) 1-{len(Medallions)} medallions, else will pick {len(Medallions)} medallions') if slotsix == 'Enabled' else col4.selectbox('Randomness', [], help=f'If enabled it will randomly select from (lets say you selected {len(Medallions)}) 1-{len(Medallions)} medallions, else will pick {len(Medallions)} medallions'); Medallion = ', '.join(sample(Medallions, k=randint(1, medallions_amount))) if slotsix == 'Enabled' and slotsix_randomness != 'Disabled' else ', '.join(sample(Medallions, k=int(medallions_amount))) if slotsix == 'Enabled' and slotsix_randomness == 'Disabled' else 'Disabled'; medallions_amount_text='0' if not medallions_amount else medallions_amount if slotsix_randomness=='Disabled' and medallions_amount else f'1-{medallions_amount}'; selected_meddalions_amount = len(Medallion.split(', ')) if slotsix == 'Enabled' and medallions_amount else '0'
with Weapon_mods: slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = AttachmentViewer(slotone_rarity, "Slot 1", "1", slotone, slotone_weapon); slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = AttachmentViewer(slottwo_rarity, "Slot 2", "2", slottwo, slottwo_weapon); slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = AttachmentViewer(slotthree_rarity, "Slot 3", "3", slotthree, slotthree_weapon); slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4 = AttachmentViewer(slotfour_rarity, "Slot 4", "4", slotfour, slotfour_weapon); slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = AttachmentViewer(slotfive_rarity, "Slot 5", "5", slotfive, slotfive_weapon)
with Loadout:
    with st.sidebar:
        if st.button('Suprise me with a random loadout'):
            slotone, slotone_weapon, slotone_rarity, slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = Random_Weapon(); slottwo, slottwo_weapon, slottwo_rarity, slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = Random_Weapon(); slotthree, slotthree_weapon, slotthree_rarity, slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = Random_Weapon(); slotfour, slotfour_weapon, slotfour_rarity, slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4= Random_Weapon(); slotfive, slotfive_weapon, slotfive_rarity, slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = Random_Weapon(); Medallion = ', '.join(sample(Medallions, k=randint(1, 3))); medallions_amount_text=f'1-3'; selected_meddalions_amount = len(Medallion.split(', ')); st.toast('Go to the :blue-background[loadout page] to see your :orange[loadout]:violet-background[!]'); st.session_state['slot1'] = [f'Item: :green[{slotone_weapon}]'  , f'Rarity: :orange[{slotone_rarity}]'  , f'Attachment 1: :red[{slotoneattachment1}]'  , f'Attachment 2: :red[{slotoneattachment2}]'  , f'Attachment 3: :red[{slotoneattachment4}]'  , f'Attachment 4: :red[{slotoneattachment4}]']; st.session_state['slot2'] = [f'Item: :green[{slottwo_weapon}]'  , f'Rarity: :orange[{slottwo_rarity}]'  , f'Attachment 1: :red[{slottwoattachment1}]'  , f'Attachment 2: :red[{slottwoattachment2}]'  , f'Attachment 3: :red[{slottwoattachment4}]'  , f'Attachment 4: :red[{slottwoattachment4}]']; st.session_state['slot3'] = [f'Item: :green[{slotthree_weapon}]', f'Rarity: :orange[{slotthree_rarity}]', f'Attachment 1: :red[{slotthreeattachment1}]', f'Attachment 2: :red[{slotthreeattachment2}]', f'Attachment 3: :red[{slotthreeattachment4}]', f'Attachment 4: :red[{slotthreeattachment4}]']; st.session_state['slot4'] = [f'Item: :green[{slotfour_weapon}]' , f'Rarity: :orange[{slotfour_rarity}]' , f'Attachment 1: :red[{slotfourattachment1}]' , f'Attachment 2: :red[{slotfourattachment2}]' , f'Attachment 3: :red[{slotfourattachment4}]' , f'Attachment 4: :red[{slotfourattachment4}]']; st.session_state['slot5'] = [f'Item: :green[{slotfive_weapon}]' , f'Rarity: :orange[{slotfive_rarity}]' , f'Attachment 1: :red[{slotfiveattachment1}]' , f'Attachment 2: :red[{slotfiveattachment2}]' , f'Attachment 3: :red[{slotfiveattachment4}]' , f'Attachment 4: :red[{slotfiveattachment4}]']; st.session_state['other'] = [f':blue[{Medallion}]', f':blue[{medallions_amount_text}]', f':blue[{selected_meddalions_amount}]']
            if not os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')): st.toast(':red[AutoConfig]\n\nCreated file :orange[Configs\\AutoConfig_Generator.txt]\n\nReason: File missing.')
            with open(os.path.join('configs', 'AutoConfig_Generator.txt'), 'a') as f: f.write(f'{str(st.session_state)}\n'); f.close()
    col1, col2, col3 = st.columns(3)
    item1, item2, item3 = col1.tabs(["Colored", "Basic", "Json"]); t1 = item1.empty(); t1.write(f'# :violet[Items]  \n##### Slot 1 : :green[{slotone_weapon}]\n#####    Slot 2 : :green[{slottwo_weapon}]\n#####    Slot 3 : :green[{slotthree_weapon}]\n#####    Slot 4 : :green[{slotfour_weapon}]\n#####    Slot 5 : :green[{slotfive_weapon}]\n##### Medallions : :blue[{Medallion}]'); t2 = item2.empty(); t2.write(f'# Items\n    Slot 1 : {slotone_weapon}\n    Slot 2 : {slottwo_weapon}\n    Slot 3 : {slotthree_weapon}\n    Slot 4 : {slotfour_weapon}\n    Slot 5 : {slotfive_weapon}\n    Medallions : {Medallion}'); t3 = item3.empty(); t3.json({'Items': [f'Slot 1 : {slotone_weapon}', f'Slot 2 : {slottwo_weapon}', f'Slot 3 : {slotthree_weapon}', f'Slot 4 : {slotfour_weapon}', f'Slot 5 : {slotfive_weapon}', f'Medallions : {Medallion}']})
    rarity1, rarity2, rarity3 = col2.tabs(["Colored", "Basic", "Json"]); tt1 = rarity1.empty(); tt1.write(f'# :violet[Rarity]  \n##### Slot 1 : :orange[{slotone_rarity}]\n#####    Slot 2 : :orange[{slottwo_rarity}]\n#####    Slot 3 : :orange[{slotthree_rarity}]\n#####    Slot 4 : :orange[{slotfour_rarity}]\n#####    Slot 5 : :orange[{slotfive_rarity}]\n#####    Medallions amount : :blue[{medallions_amount_text}] (current: :blue[{selected_meddalions_amount}])'); tt2 = rarity2.empty(); tt2.write(f'# Rarity\n    Slot 1 : {slotone_rarity}\n    Slot 2 : {slottwo_rarity}\n    Slot 3 : {slotthree_rarity}\n    Slot 4 : {slotfour_rarity}\n    Slot 5 : {slotfive_rarity}\n    Medallions amount : {medallions_amount_text} (current: {selected_meddalions_amount})'); tt3 = rarity3.empty(); tt3.json({'Rarity': [f'Slot 1 : {slotone_rarity}', f'Slot 2 : {slottwo_rarity}', f'Slot 3 : {slotthree_rarity}', f'Slot 4 : {slotfour_rarity}', f'Slot 5 : {slotfive_rarity}', f'Medallions amount : {medallions_amount_text} (current: {selected_meddalions_amount}'], })
    taba1, taba2, taba3 = col3.tabs(["Colored", "Basic", "Json"]); ttt1 = taba1.empty(); ttt1.write(f'# :violet[Attachments]  \n##### Slot 1 : :red[{slotoneattachment1}], :red[{slotoneattachment2}], :red[{slotoneattachment3}], :red[{slotoneattachment4}]\n#####    Slot 2 : :red[{slottwoattachment1}], :red[{slottwoattachment2}], :red[{slottwoattachment3}], :red[{slottwoattachment4}]\n#####    Slot 3 : :red[{slotthreeattachment1}], :red[{slotthreeattachment2}], :red[{slotthreeattachment3}], :red[{slotthreeattachment4}]\n#####    Slot 4 : :red[{slotfourattachment1}], :red[{slotfourattachment2}], :red[{slotfourattachment3}], :red[{slotfourattachment4}]\n#####    Slot 5 : :red[{slotfiveattachment1}], :red[{slotfiveattachment2}], :red[{slotfiveattachment3}], :red[{slotfiveattachment4}]'); ttt2 = taba2.empty(); ttt2.write(f'# Attachments\n    Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}\n    Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}\n    Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}\n    Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}\n    Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'); ttt3 = taba3.empty(); ttt3.json({'Attachments': [f'Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}', f'Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}', f'Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}', f'Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}', f'Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'], })
    st.divider()
    if st.button('Randomize loadout'):
        st.session_state['slot1'] = [f'Item: :green[{slotone_weapon}]'  , f'Rarity: :orange[{slotone_rarity}]'  , f'Attachment 1: :red[{slotoneattachment1}]'  , f'Attachment 2: :red[{slotoneattachment2}]'  , f'Attachment 3: :red[{slotoneattachment4}]'  , f'Attachment 4: :red[{slotoneattachment4}]']; st.session_state['slot2'] = [f'Item: :green[{slottwo_weapon}]'  , f'Rarity: :orange[{slottwo_rarity}]'  , f'Attachment 1: :red[{slottwoattachment1}]'  , f'Attachment 2: :red[{slottwoattachment2}]'  , f'Attachment 3: :red[{slottwoattachment4}]'  , f'Attachment 4: :red[{slottwoattachment4}]']; st.session_state['slot3'] = [f'Item: :green[{slotthree_weapon}]', f'Rarity: :orange[{slotthree_rarity}]', f'Attachment 1: :red[{slotthreeattachment1}]', f'Attachment 2: :red[{slotthreeattachment2}]', f'Attachment 3: :red[{slotthreeattachment4}]', f'Attachment 4: :red[{slotthreeattachment4}]']; st.session_state['slot4'] = [f'Item: :green[{slotfour_weapon}]' , f'Rarity: :orange[{slotfour_rarity}]' , f'Attachment 1: :red[{slotfourattachment1}]' , f'Attachment 2: :red[{slotfourattachment2}]' , f'Attachment 3: :red[{slotfourattachment4}]' , f'Attachment 4: :red[{slotfourattachment4}]']; st.session_state['slot5'] = [f'Item: :green[{slotfive_weapon}]' , f'Rarity: :orange[{slotfive_rarity}]' , f'Attachment 1: :red[{slotfiveattachment1}]' , f'Attachment 2: :red[{slotfiveattachment2}]' , f'Attachment 3: :red[{slotfiveattachment4}]' , f'Attachment 4: :red[{slotfiveattachment4}]']; st.session_state['other'] = [f':blue[{Medallion}]', f':blue[{medallions_amount_text}]', f':blue[{selected_meddalions_amount}]']
        if not os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')): st.toast(':red[AutoConfig]\n\nCreated file :orange[Configs\\AutoConfig_Generator.txt]\n\nReason: File missing.')
        with open(os.path.join('configs', 'AutoConfig_Generator.txt'), 'a') as f: f.write(f'{str(st.session_state)}\n'); f.close()
        st.toast(f'Your loadout was :rainbow[generated!]', icon='✅')
    with st.popover('Load :red[AutoConfig]', help=':red[AutoConfig] will automatically save your config after every time you generate a new one (by pressing Randomize loadout), this means you\'ll never lose out on of your loadouts\n\n:red[AutoConfig] will stay disabled when you have no past config history', disabled=False):#disabled=False if os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')) else True):
        @st.dialog("Loadout preview")
        def preview(text):
            slot1,slot2,slot3,slot4,slot5,slot6 = st.tabs(['Slot 1', 'Slot 2', 'Slot 3', 'Slot 4', 'Slot 5', 'Medallions'])
            col1,col2=slot1.columns(2); ignore = text.split('\n\n\n')[0].split(': :green[')[1].split(']')[0]; col1.write(text.split('\n\n\n')[0]); (lambda: col2.image(items_images[text.split('\n\n\n')[0].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[0].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{ignore}'"))(); col1,col2=slot2.columns(2); ignore = text.split('\n\n\n')[1].split(': :green[')[1].split(']')[0]; col1.write(text.split('\n\n\n')[1]); (lambda: col2.image(items_images[text.split('\n\n\n')[1].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[1].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{ignore}'"))(); col1,col2=slot3.columns(2); ignore = text.split('\n\n\n')[2].split(': :green[')[1].split(']')[0]; col1.write(text.split('\n\n\n')[2]); (lambda: col2.image(items_images[text.split('\n\n\n')[2].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[2].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{ignore}'"))(); col1,col2=slot4.columns(2); ignore = text.split('\n\n\n')[3].split(': :green[')[1].split(']')[0]; col1.write(text.split('\n\n\n')[3]); (lambda: col2.image(items_images[text.split('\n\n\n')[3].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[3].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{ignore}'"))(); col1,col2=slot5.columns(2); ignore = text.split('\n\n\n')[4].split(': :green[')[1].split(']')[0]; col1.write(text.split('\n\n\n')[4]); (lambda: col2.image(items_images[text.split('\n\n\n')[4].split(': :green[')[1].split(']')[0]], width=100) if text.split('\n\n\n')[4].split(': :green[')[1].split(']')[0] in items_images else col2.caption(f"No image found for '{ignore}'"))()
            slot6.write(text.split('\n\n\n')[5])
            if st.button('Exit'): st.rerun()
        if not os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')): st.header(':red[AutoConfig]\n\nFile is missing :sob:')
        elif os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')) and (ignore := open(os.path.join('configs', 'AutoConfig_Generator.txt')).readlines()) == []: st.header(':red[AutoConfig]\n\nNo configs to load :sob:')
        if os.path.exists(os.path.join('configs', 'AutoConfig_Generator.txt')):
            with open(os.path.join('configs', 'AutoConfig_Generator.txt'), 'r') as f: g = f.readlines()
            for i in range(len(g)):
                line_data = eval(g[i])
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f'Loadout {i+1}', help=f'Load config {i+1}', use_container_width=True): slotone_weapon, slotone_rarity, slotoneattachment1, slotoneattachment2, slotoneattachment3, slotoneattachment4 = (line_data.get('slot1'))[0].split('[')[1].split(']')[0], (line_data.get('slot1'))[1].split('[')[1].split(']')[0], (line_data.get('slot1'))[2].split('[')[1].split(']')[0], (line_data.get('slot1'))[3].split('[')[1].split(']')[0], (line_data.get('slot1'))[4].split('[')[1].split(']')[0], (line_data.get('slot1'))[5].split('[')[1].split(']')[0]; slottwo_weapon, slottwo_rarity, slottwoattachment1, slottwoattachment2, slottwoattachment3, slottwoattachment4 = (line_data.get('slot2'))[0].split('[')[1].split(']')[0], (line_data.get('slot2'))[1].split('[')[1].split(']')[0], (line_data.get('slot2'))[2].split('[')[1].split(']')[0], (line_data.get('slot2'))[3].split('[')[1].split(']')[0], (line_data.get('slot2'))[4].split('[')[1].split(']')[0], (line_data.get('slot2'))[5].split('[')[1].split(']')[0]; slotthree_weapon, slotthree_rarity, slotthreeattachment1, slotthreeattachment2, slotthreeattachment3, slotthreeattachment4 = (line_data.get('slot3'))[0].split('[')[1].split(']')[0], (line_data.get('slot3'))[1].split('[')[1].split(']')[0], (line_data.get('slot3'))[2].split('[')[1].split(']')[0], (line_data.get('slot3'))[3].split('[')[1].split(']')[0], (line_data.get('slot3'))[4].split('[')[1].split(']')[0], (line_data.get('slot3'))[5].split('[')[1].split(']')[0]; slotfour_weapon, slotfour_rarity, slotfourattachment1, slotfourattachment2, slotfourattachment3, slotfourattachment4 = (line_data.get('slot4'))[0].split('[')[1].split(']')[0], (line_data.get('slot4'))[1].split('[')[1].split(']')[0], (line_data.get('slot4'))[2].split('[')[1].split(']')[0], (line_data.get('slot4'))[3].split('[')[1].split(']')[0], (line_data.get('slot4'))[4].split('[')[1].split(']')[0], (line_data.get('slot4'))[5].split('[')[1].split(']')[0]; slotfive_weapon, slotfive_rarity, slotfiveattachment1, slotfiveattachment2, slotfiveattachment3, slotfiveattachment4 = (line_data.get('slot5'))[0].split('[')[1].split(']')[0], (line_data.get('slot5'))[1].split('[')[1].split(']')[0], (line_data.get('slot5'))[2].split('[')[1].split(']')[0], (line_data.get('slot5'))[3].split('[')[1].split(']')[0], (line_data.get('slot5'))[4].split('[')[1].split(']')[0], (line_data.get('slot5'))[5].split('[')[1].split(']')[0]; Medallion=(line_data.get("other"))[0]; medallions_amount_text=(line_data.get("other"))[1]; selected_meddalions_amount=(line_data.get("other"))[2]; t1.write(f'# :violet[Items]  \n##### Slot 1 : :green[{slotone_weapon}]\n#####    Slot 2 : :green[{slottwo_weapon}]\n#####    Slot 3 : :green[{slotthree_weapon}]\n#####    Slot 4 : :green[{slotfour_weapon}]\n#####    Slot 5 : :green[{slotfive_weapon}]\n#####    Medallions : :blue[{Medallion}]');  t2.write(f'# Items\n    Slot 1 : {slotone_weapon}\n    Slot 2 : {slottwo_weapon}\n    Slot 3 : {slotthree_weapon}\n    Slot 4 : {slotfour_weapon}\n    Slot 5 : {slotfive_weapon}\n    Medallions : {Medallion}');  t3.json({'Items': [f'Slot 1 : {slotone_weapon}', f'Slot 2 : {slottwo_weapon}', f'Slot 3 : {slotthree_weapon}', f'Slot 4 : {slotfour_weapon}', f'Slot 5 : {slotfive_weapon}', f'Medallions : {Medallion}'],});  tt1.write(f'# :violet[Rarity]  \n##### Slot 1 : :orange[{slotone_rarity}]\n#####    Slot 2 : :orange[{slottwo_rarity}]\n#####    Slot 3 : :orange[{slotthree_rarity}]\n#####    Slot 4 : :orange[{slotfour_rarity}]\n#####    Slot 5 : :orange[{slotfive_rarity}]\n#####    Medallions amount : :blue[{medallions_amount_text}] (current: :blue[{selected_meddalions_amount}])');  tt2.write(f'# Rarity\n    Slot 1 : {slotone_rarity}\n    Slot 2 : {slottwo_rarity}\n    Slot 3 : {slotthree_rarity}\n    Slot 4 : {slotfour_rarity}\n    Slot 5 : {slotfive_rarity}\n    Medallions amount : {medallions_amount_text} (current: {selected_meddalions_amount})');  tt3.json({'Rarity': [f'Slot 1 : {slotone_rarity}', f'Slot 2 : {slottwo_rarity}', f'Slot 3 : {slotthree_rarity}', f'Slot 4 : {slotfour_rarity}', f'Slot 5 : {slotfive_rarity}', f'Medallions amount : {medallions_amount_text} (current: {selected_meddalions_amount}'], });  ttt1.write(f'# :violet[Attachments]  \n##### Slot 1 : :red[{slotoneattachment1}], :red[{slotoneattachment2}], :red[{slotoneattachment3}], :red[{slotoneattachment4}]\n#####    Slot 2 : :red[{slottwoattachment1}], :red[{slottwoattachment2}], :red[{slottwoattachment3}], :red[{slottwoattachment4}]\n#####    Slot 3 : :red[{slotthreeattachment1}], :red[{slotthreeattachment2}], :red[{slotthreeattachment3}], :red[{slotthreeattachment4}]\n#####    Slot 4 : :red[{slotfourattachment1}], :red[{slotfourattachment2}], :red[{slotfourattachment3}], :red[{slotfourattachment4}]\n#####    Slot 5 : :red[{slotfiveattachment1}], :red[{slotfiveattachment2}], :red[{slotfiveattachment3}], :red[{slotfiveattachment4}]');  ttt2.write(f'# Attachments\n    Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}\n    Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}\n    Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}\n    Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}\n    Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'); ttt3.json({'Attachments': [f'Slot 1 : {slotoneattachment1}, {slotoneattachment2}, {slotoneattachment3}, {slotoneattachment4}', f'Slot 2 : {slottwoattachment1}, {slottwoattachment2}, {slottwoattachment3}, {slottwoattachment4}', f'Slot 3 : {slotthreeattachment1}, {slotthreeattachment2}, {slotthreeattachment3}, {slotthreeattachment4}', f'Slot 4 : {slotfourattachment1}, {slotfourattachment2}, {slotfourattachment3}, {slotfourattachment4}', f'Slot 5 : {slotfiveattachment1}, {slotfiveattachment2}, {slotfiveattachment3}, {slotfiveattachment4}'], }); st.toast(f':red[AutoConfig]\n\n:blue[Loaded configuration] from file: :orange[configs\\AutoConfig_Generator.txt]', icon="✨")
                with col2:
                    if st.button('Loadout preview', help=f'Preview the loadout for slot {i+1}', use_container_width=True): preview(f'Item: :green[{(line_data.get("slot1"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot1"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot1"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot1"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot2"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot2"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot2"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot2"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot3"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot3"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot3"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot3"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot4"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot4"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot4"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot4"))[5].split("[")[1].split("]")[0]}]\n\n\nItem: :green[{(line_data.get("slot5"))[0].split("[")[1].split("]")[0]}]\n\nRarity: :orange[{(line_data.get("slot5"))[1].split("[")[1].split("]")[0]}]\n\nAttachments: :red[{(line_data.get("slot5"))[2].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[3].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[4].split("[")[1].split("]")[0]}], :red[{(line_data.get("slot5"))[5].split("[")[1].split("]")[0]}]\n\n\nMedallions: :blue[{(line_data.get("other"))[0]}]\n\nMedallions amount: :blue[{(line_data.get("other"))[1]}]\n\nCurrently selected amount: :blue[{(line_data.get("other"))[2]}]')
                with col3:
                    if st.button('Remove loadout', help=f'Remove loadout {i+1}', use_container_width=True, type='primary'):
                        st.session_state.deleted_loadout_index = i
                        if st.session_state.deleted_loadout_index is not None:
                            i = st.session_state.deleted_loadout_index
                            with open(os.path.join('configs', 'AutoConfig_Generator.txt'), 'r') as f: lines = f.readlines(), f.close()
                            with open(os.path.join('configs', 'AutoConfig_Generator.txt'), 'w') as f:
                                for index, line in enumerate(lines[0]):
                                    if index != i: f.write(line)
                            st.toast('Loadout deleted.'); st.session_state.deleted_loadout_index = None; st.rerun()
                if i+1 != len(g): st.divider()
with Weapon_Info:
    col1, col2 = st.columns(2)
    with col1.expander('Frenzy Auto Shotgun') as col1_info: weapon_name = 'Frenzy Auto Shotgun'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); weaponinfo = st.container(border=True); col1expanded,col2expanded,col3expanded,col4expanded,col5expanded,col6expanded = weaponinfo.columns(6); pop1 = col1expanded.popover(':gray[C]', help='Rarity: :gray[Common]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); pop2 = col2expanded.popover(':green[U]', help='Rarity: :green[Uncommon]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop2.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][1][0]); tab21.write('# ' + item_infos[weapon_name][1][1]); tab31.write('# ' + item_infos[weapon_name][1][2]); tab41.write('# ' + item_infos[weapon_name][1][3]) ; tab51.write('# ' + item_infos[weapon_name][1][4]); pop3 = col3expanded.popover(':blue[R]', help='Rarity: :blue[Rare]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop3.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][2][0]); tab21.write('# ' + item_infos[weapon_name][2][1]); tab31.write('# ' + item_infos[weapon_name][2][2]); tab41.write('# ' + item_infos[weapon_name][2][3]) ; tab51.write('# ' + item_infos[weapon_name][2][4]); pop4 = col4expanded.popover(':violet[E]', help='Rarity: :violet[Epic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop4.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][3][0]); tab21.write('# ' + item_infos[weapon_name][3][1]); tab31.write('# ' + item_infos[weapon_name][3][2]); tab41.write('# ' + item_infos[weapon_name][3][3]) ; tab51.write('# ' + item_infos[weapon_name][3][4]); pop5 = col5expanded.popover(':orange[L]', help='Rarity: :orange[Legendary]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop5.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][4][0]); tab21.write('# ' + item_infos[weapon_name][4][1]); tab31.write('# ' + item_infos[weapon_name][4][2]); tab41.write('# ' + item_infos[weapon_name][4][3]); tab51.write('# ' + item_infos[weapon_name][4][4]); pop6 = col6expanded.popover(':red[M]', help='Rarity: :red[Mythic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop6.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][5][0]); tab21.write('# ' + item_infos[weapon_name][5][1]); tab31.write('# ' + item_infos[weapon_name][5][2]); tab41.write('# ' + item_infos[weapon_name][5][3]); tab51.write('# ' + item_infos[weapon_name][5][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌');     info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
    with col2.expander('Hammer Pump Shotgun') as col1_info: weapon_name = 'Hammer Pump Shotgun'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); weaponinfo = st.container(border=True); col1expanded,col2expanded,col3expanded,col4expanded,col5expanded = weaponinfo.columns(5); pop1 = col1expanded.popover(':gray[C]', help='Rarity: :gray[Common]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); pop2 = col2expanded.popover(':green[U]', help='Rarity: :green[Uncommon]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop2.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][1][0]); tab21.write('# ' + item_infos[weapon_name][1][1]); tab31.write('# ' + item_infos[weapon_name][1][2]); tab41.write('# ' + item_infos[weapon_name][1][3]) ; tab51.write('# ' + item_infos[weapon_name][1][4]); pop3 = col3expanded.popover(':blue[R]', help='Rarity: :blue[Rare]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop3.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][2][0]); tab21.write('# ' + item_infos[weapon_name][2][1]); tab31.write('# ' + item_infos[weapon_name][2][2]); tab41.write('# ' + item_infos[weapon_name][2][3]) ; tab51.write('# ' + item_infos[weapon_name][2][4]); pop4 = col4expanded.popover(':violet[E]', help='Rarity: :violet[Epic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop4.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][3][0]); tab21.write('# ' + item_infos[weapon_name][3][1]); tab31.write('# ' + item_infos[weapon_name][3][2]); tab41.write('# ' + item_infos[weapon_name][3][3]) ; tab51.write('# ' + item_infos[weapon_name][3][4]); pop5 = col5expanded.popover(':orange[L]', help='Rarity: :orange[Legendary]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop5.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][4][0]); tab21.write('# ' + item_infos[weapon_name][4][1]); tab31.write('# ' + item_infos[weapon_name][4][2]); tab41.write('# ' + item_infos[weapon_name][4][3]); tab51.write('# ' + item_infos[weapon_name][4][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌');     info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
    col1, col2 = st.columns(2)
    with col1.expander('Gatekeeper Shotgun') as col1_info: weapon_name = 'Gatekeeper Shotgun'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); weaponinfo = st.container(border=True); col1expanded,col2expanded,col3expanded,col4expanded,col5expanded,col6expanded = weaponinfo.columns(6); pop1 = col1expanded.popover(':gray[C]', help='Rarity: :gray[Common]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); pop2 = col2expanded.popover(':green[U]', help='Rarity: :green[Uncommon]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop2.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][1][0]); tab21.write('# ' + item_infos[weapon_name][1][1]); tab31.write('# ' + item_infos[weapon_name][1][2]); tab41.write('# ' + item_infos[weapon_name][1][3]) ; tab51.write('# ' + item_infos[weapon_name][1][4]); pop3 = col3expanded.popover(':blue[R]', help='Rarity: :blue[Rare]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop3.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][2][0]); tab21.write('# ' + item_infos[weapon_name][2][1]); tab31.write('# ' + item_infos[weapon_name][2][2]); tab41.write('# ' + item_infos[weapon_name][2][3]) ; tab51.write('# ' + item_infos[weapon_name][2][4]); pop4 = col4expanded.popover(':violet[E]', help='Rarity: :violet[Epic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop4.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][3][0]); tab21.write('# ' + item_infos[weapon_name][3][1]); tab31.write('# ' + item_infos[weapon_name][3][2]); tab41.write('# ' + item_infos[weapon_name][3][3]) ; tab51.write('# ' + item_infos[weapon_name][3][4]); pop5 = col5expanded.popover(':orange[L]', help='Rarity: :orange[Legendary]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop5.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][4][0]); tab21.write('# ' + item_infos[weapon_name][4][1]); tab31.write('# ' + item_infos[weapon_name][4][2]); tab41.write('# ' + item_infos[weapon_name][4][3]); tab51.write('# ' + item_infos[weapon_name][4][4]); pop6 = col6expanded.popover(':red[M]', help='Rarity: :red[Mythic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop6.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][5][0]); tab21.write('# ' + item_infos[weapon_name][5][1]); tab31.write('# ' + item_infos[weapon_name][5][2]); tab41.write('# ' + item_infos[weapon_name][5][3]); tab51.write('# ' + item_infos[weapon_name][5][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌');     info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
    with col2.expander('Combat Shotgun') as col1_info: weapon_name = 'Combat Shotgun'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); weaponinfo = st.container(border=True); col1expanded,col2expanded,col3expanded,col4expanded,col5expanded,col6expanded = weaponinfo.columns(6); pop1 = col1expanded.popover(':gray[C]', help='Rarity: :gray[Common]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); pop2 = col2expanded.popover(':green[U]', help='Rarity: :green[Uncommon]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop2.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][1][0]); tab21.write('# ' + item_infos[weapon_name][1][1]); tab31.write('# ' + item_infos[weapon_name][1][2]); tab41.write('# ' + item_infos[weapon_name][1][3]) ; tab51.write('# ' + item_infos[weapon_name][1][4]); pop3 = col3expanded.popover(':blue[R]', help='Rarity: :blue[Rare]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop3.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][2][0]); tab21.write('# ' + item_infos[weapon_name][2][1]); tab31.write('# ' + item_infos[weapon_name][2][2]); tab41.write('# ' + item_infos[weapon_name][2][3]) ; tab51.write('# ' + item_infos[weapon_name][2][4]); pop4 = col4expanded.popover(':violet[E]', help='Rarity: :violet[Epic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop4.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][3][0]); tab21.write('# ' + item_infos[weapon_name][3][1]); tab31.write('# ' + item_infos[weapon_name][3][2]); tab41.write('# ' + item_infos[weapon_name][3][3]) ; tab51.write('# ' + item_infos[weapon_name][3][4]); pop5 = col5expanded.popover(':orange[L]', help='Rarity: :orange[Legendary]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop5.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][4][0]); tab21.write('# ' + item_infos[weapon_name][4][1]); tab31.write('# ' + item_infos[weapon_name][4][2]); tab41.write('# ' + item_infos[weapon_name][4][3]); tab51.write('# ' + item_infos[weapon_name][4][4]); pop6 = col6expanded.popover(':red[M]', help='Rarity: :red[Mythic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop6.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][5][0]); tab21.write('# ' + item_infos[weapon_name][5][1]); tab31.write('# ' + item_infos[weapon_name][5][2]); tab41.write('# ' + item_infos[weapon_name][5][3]); tab51.write('# ' + item_infos[weapon_name][5][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌');     info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
    st.divider()
    col1, col2 = st.columns(2)
    with col1.expander('The Machinist\'s Combat Assault Rifle') as col1_info:  weapon_name = 'The Machinist\'s Combat Assault Rifle'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); pop1 = st.container(border=True).popover(':red[M]', help='Rarity: :red[Mythic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌'); info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
    with col2.expander('Warforged Assault Rifle') as col1_info:  weapon_name = 'Warforged Assault Rifle'; col1_,_,col2_ = st.columns(3); col1_.caption('Hover over the raritys for more info', help='Hovering over the raritys will say what rarity it is coresponding to each letter (Rarity).'); image=col2_.popover('Image', use_container_width=True); (lambda: image.image(items_images[weapon_name], f'Image of the \'{weapon_name}\'', use_column_width=True) if weapon_name in items_images else image.caption(f"No valid image for ':red[{weapon_name}]'"))(); st.subheader("Weapon info", divider='rainbow'); weaponinfo = st.container(border=True); col1expanded,col2expanded,col3expanded,col4expanded,col5expanded = weaponinfo.columns(5); pop1 = col1expanded.popover(':gray[C]', help='Rarity: :gray[Common]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop1.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][0][0]); tab21.write('# ' + item_infos[weapon_name][0][1]); tab31.write('# ' + item_infos[weapon_name][0][2]); tab41.write('# ' + item_infos[weapon_name][0][3]); tab51.write('# ' + item_infos[weapon_name][0][4]); pop2 = col2expanded.popover(':green[U]', help='Rarity: :green[Uncommon]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop2.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][1][0]); tab21.write('# ' + item_infos[weapon_name][1][1]); tab31.write('# ' + item_infos[weapon_name][1][2]); tab41.write('# ' + item_infos[weapon_name][1][3]) ; tab51.write('# ' + item_infos[weapon_name][1][4]); pop3 = col3expanded.popover(':blue[R]', help='Rarity: :blue[Rare]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop3.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][2][0]); tab21.write('# ' + item_infos[weapon_name][2][1]); tab31.write('# ' + item_infos[weapon_name][2][2]); tab41.write('# ' + item_infos[weapon_name][2][3]) ; tab51.write('# ' + item_infos[weapon_name][2][4]); pop4 = col4expanded.popover(':violet[E]', help='Rarity: :violet[Epic]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop4.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][3][0]); tab21.write('# ' + item_infos[weapon_name][3][1]); tab31.write('# ' + item_infos[weapon_name][3][2]); tab41.write('# ' + item_infos[weapon_name][3][3]) ; tab51.write('# ' + item_infos[weapon_name][3][4]); pop5 = col5expanded.popover(':orange[L]', help='Rarity: :orange[Legendary]', use_container_width=True); tab11,tab21,tab31,tab41,tab51 = pop5.tabs(['Damage', 'Headshot Damage', 'Firerate', 'Clip Size', 'Reload Time']); tab11.write('# ' + item_infos[weapon_name][4][0]); tab21.write('# ' + item_infos[weapon_name][4][1]); tab31.write('# ' + item_infos[weapon_name][4][2]); tab41.write('# ' + item_infos[weapon_name][4][3]); tab51.write('# ' + item_infos[weapon_name][4][4]); st.subheader("Weapon attachments info", divider='rainbow'); attachmentinfo = st.container(border=True); col1info,col2info,col3info,col4info = attachmentinfo.columns(4); info1 = col1info.popover('O', use_container_width=True, help='Attachment: :red[Optic]');       info1.write('Red Eye Sight: ✅' if 'Red Eye Sight' in weapon_attachments[weapon_name][0] else 'Red Eye Sight: ❌');   info1.write('Holo-13 Optic: ✅' if 'Holo-13 Optic' in weapon_attachments[weapon_name][0] else 'Holo-13 Optic: ❌');     info1.write('P2X Optic: ✅' if 'P2X Optic' in weapon_attachments[weapon_name][0] else 'P2X Optic: ❌'); info1.write('Thermal Optic: ✅'  if 'Thermal Optic' in weapon_attachments[weapon_name][0] else 'Thermal Optic: ❌'); info1.write('Sniper Optic: ✅' if 'Sniper Optic' in weapon_attachments[weapon_name][0] else 'Sniper Optic: ❌'); info2 = col2info.popover('M', use_container_width=True, help='Attachment: :red[Magazine]');    info2.write('Drum Mag: ✅' if 'Drum Mag' in weapon_attachments[weapon_name][1] else 'Drum Mag: ❌');        info2.write('Speed Mag: ✅' if 'Speed Mag' in weapon_attachments[weapon_name][1] else 'Speed Mag: ❌'); info3 = col3info.popover('U', use_container_width=True, help='Attachment: :red[Underbarrel]'); info3.write('Angled Foregrip: ✅' if 'Angled Foregrip' in weapon_attachments[weapon_name][2] else 'Angled Foregrip: ❌'); info3.write('Vertical Foregrip: ✅' if 'Vertical Foregrip' in weapon_attachments[weapon_name][2] else 'Vertical Foregrip: ❌'); info3.write('Laser: ✅' if 'Laser' in weapon_attachments[weapon_name][2] else 'Laser: ❌');     info3.write('Speed Foregrip: ✅' if 'Speed Foregrip' in weapon_attachments[weapon_name][2] else 'Speed Foregrip: ❌'); info4 = col4info.popover('B', use_container_width=True, help='Attachment: :red[Barrel]');      info4.write('Muzzle Brake: ✅' if 'Muzzle Brake' in weapon_attachments[weapon_name][3] else 'Muzzle Brake: ❌');    info4.write('Suppressor: ✅' if 'Suppressor' in weapon_attachments[weapon_name][3] else 'Suppresor: ❌')
with st.sidebar: st.page_link("http://www.Github.com/fuzzybuzzyboy/py", label="Github", icon="🛢️"); #st.caption('How did you like using the app?'); a = st.feedback(options="stars"); b = a+1 if a != None else 0; print(f'{b} stars - { 'No rating yet' if b == 0 else 'TRASH!' if b == 1 else 'It was okay.' if b == 2 else 'It\'s alright' if b == 3 else 'I liked it!' if b == 4 else 'I loved it!' if b == 5 else 'Error'}')
